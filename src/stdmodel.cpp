// Generated by dust (version 0.11.29) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_stdmodel_capabilities();

[[cpp11::register]]
cpp11::sexp dust_stdmodel_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_stdmodel_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_run(SEXP ptr, size_t step_end);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_simulate(SEXP ptr, cpp11::sexp step_end);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
size_t dust_cpu_stdmodel_step(SEXP ptr);

[[cpp11::register]]
void dust_cpu_stdmodel_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_set_data(SEXP ptr, cpp11::list data, bool shared);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_stdmodel_filter(SEXP ptr, SEXP step_end,
                                     bool save_trajectories,
                                     cpp11::sexp step_snapshot,
                                     cpp11::sexp min_log_likelihood);

[[cpp11::register]]
void dust_cpu_stdmodel_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_stdmodel_n_state(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.2.13) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}
// [[dust::class(stdmodel)]]
// [[dust::param(E_msm_ini, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(E_r_ini, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(I_msm_ini, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(I_r_ini, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_msm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_steps, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(R_msm_ini, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(R_r_ini, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S_msm_ini, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S_r_ini, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_ns, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_s, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(infectious_periode, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(latent_periode, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(weights, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n, has_default = TRUE, default_value = 4L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class stdmodel {
public:
  typedef double real_type;
  typedef dust::random::generator<real_type> rng_state_type;
  typedef dust::no_data data_type;
  struct shared_type {
    std::vector<real_type> E_msm_ini;
    real_type E_r_ini;
    std::vector<real_type> I_msm_ini;
    real_type I_r_ini;
    real_type N;
    real_type N_msm;
    real_type N_steps;
    real_type R_msm_ini;
    real_type R_r_ini;
    std::vector<real_type> S_msm_ini;
    real_type S_r_ini;
    real_type beta_ns;
    real_type beta_s;
    int dim_E_msm;
    int dim_E_msm_ini;
    int dim_I_msm;
    int dim_I_msm_ini;
    int dim_S_msm;
    int dim_S_msm_ini;
    int dim_lambda_s_msm;
    int dim_lambda_s_msm_1;
    int dim_lambda_s_msm_2;
    int dim_n_EI_msm;
    int dim_n_IR_msm;
    int dim_n_SI_msm;
    int dim_p_SI_msm;
    int dim_weights;
    real_type dt;
    real_type infectious_periode;
    std::vector<real_type> initial_E_msm;
    real_type initial_E_r;
    std::vector<real_type> initial_I_msm;
    real_type initial_I_r;
    real_type initial_R_msm;
    real_type initial_R_r;
    std::vector<real_type> initial_S_msm;
    real_type initial_S_r;
    real_type initial_inc_msm;
    real_type initial_inc_r;
    real_type initial_time;
    real_type latent_periode;
    int n;
    int offset_variable_E_msm;
    int offset_variable_I_msm;
    real_type p_EI;
    real_type p_IR;
    real_type steps_per_day;
    std::vector<real_type> weights;
  };
  struct internal_type {
    std::vector<real_type> lambda_s_msm;
    std::vector<real_type> n_EI_msm;
    std::vector<real_type> n_IR_msm;
    std::vector<real_type> n_SI_msm;
    std::vector<real_type> p_SI_msm;
  };
  stdmodel(const dust::pars_type<stdmodel>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return shared->dim_E_msm + shared->dim_I_msm + shared->dim_S_msm + 8;
  }
  std::vector<real_type> initial(size_t step) {
    std::vector<real_type> state(shared->dim_E_msm + shared->dim_I_msm + shared->dim_S_msm + 8);
    state[0] = shared->initial_time;
    state[1] = shared->initial_R_msm;
    state[2] = shared->initial_inc_msm;
    state[3] = shared->initial_S_r;
    state[4] = shared->initial_E_r;
    state[5] = shared->initial_I_r;
    state[6] = shared->initial_R_r;
    state[7] = shared->initial_inc_r;
    std::copy(shared->initial_S_msm.begin(), shared->initial_S_msm.end(), state.begin() + 8);
    std::copy(shared->initial_E_msm.begin(), shared->initial_E_msm.end(), state.begin() + shared->offset_variable_E_msm);
    std::copy(shared->initial_I_msm.begin(), shared->initial_I_msm.end(), state.begin() + shared->offset_variable_I_msm);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type * S_msm = state + 8;
    const real_type * E_msm = state + shared->offset_variable_E_msm;
    const real_type * I_msm = state + shared->offset_variable_I_msm;
    const real_type R_msm = state[1];
    const real_type inc_msm = state[2];
    const real_type S_r = state[3];
    const real_type E_r = state[4];
    const real_type I_r = state[5];
    const real_type R_r = state[6];
    const real_type inc_r = state[7];
    state_next[0] = (step + 1) * shared->dt;
    real_type lambda_r = shared->beta_ns * (I_r + odin_sum1<real_type>(I_msm, 0, shared->dim_I_msm)) / (real_type) shared->N;
    real_type n_EI_r = dust::random::binomial<real_type>(rng_state, E_r, shared->p_EI);
    real_type n_IR_r = dust::random::binomial<real_type>(rng_state, I_r, shared->p_IR);
    for (int i = 1; i <= shared->dim_n_EI_msm; ++i) {
      internal.n_EI_msm[i - 1] = dust::random::binomial<real_type>(rng_state, E_msm[i - 1], shared->p_EI);
    }
    for (int i = 1; i <= shared->dim_n_IR_msm; ++i) {
      internal.n_IR_msm[i - 1] = dust::random::binomial<real_type>(rng_state, I_msm[i - 1], shared->p_IR);
    }
    real_type p_SI_r = 1 - std::exp(- lambda_r * shared->dt);
    state_next[5] = I_r + n_EI_r - n_IR_r;
    state_next[6] = R_r + n_IR_r;
    for (int i = 1; i <= shared->dim_lambda_s_msm_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_s_msm_2; ++j) {
        internal.lambda_s_msm[i - 1 + shared->dim_lambda_s_msm_1 * (j - 1)] = shared->beta_s * shared->weights[i - 1] * (shared->weights[j - 1]) * I_msm[j - 1] / (real_type) shared->N_msm;
      }
    }
    real_type n_SI_r = dust::random::binomial<real_type>(rng_state, S_r, p_SI_r);
    for (int i = 1; i <= shared->dim_I_msm; ++i) {
      state_next[shared->offset_variable_I_msm + i - 1] = I_msm[i - 1] + internal.n_EI_msm[i - 1] - internal.n_IR_msm[i - 1];
    }
    state_next[1] = R_msm + odin_sum1<real_type>(internal.n_IR_msm.data(), 0, shared->dim_n_IR_msm);
    for (int i = 1; i <= shared->dim_p_SI_msm; ++i) {
      internal.p_SI_msm[i - 1] = 1 - std::exp(- odin_sum2<real_type>(internal.lambda_s_msm.data(), i - 1, i, 0, shared->dim_lambda_s_msm_2, shared->dim_lambda_s_msm_1) * shared->dt);
    }
    state_next[4] = E_r + n_SI_r - n_EI_r;
    state_next[3] = S_r - n_SI_r;
    state_next[7] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? n_SI_r : inc_r + n_SI_r);
    for (int i = 1; i <= shared->dim_n_SI_msm; ++i) {
      internal.n_SI_msm[i - 1] = dust::random::binomial<real_type>(rng_state, S_msm[i - 1], internal.p_SI_msm[i - 1]);
    }
    for (int i = 1; i <= shared->dim_E_msm; ++i) {
      state_next[shared->offset_variable_E_msm + i - 1] = E_msm[i - 1] + internal.n_SI_msm[i - 1] - internal.n_EI_msm[i - 1];
    }
    for (int i = 1; i <= shared->dim_S_msm; ++i) {
      state_next[8 + i - 1] = S_msm[i - 1] - internal.n_SI_msm[i - 1];
    }
    state_next[2] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum1<real_type>(internal.n_SI_msm.data(), 0, shared->dim_n_SI_msm) : inc_msm + odin_sum1<real_type>(internal.n_SI_msm.data(), 0, shared->dim_n_SI_msm));
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<stdmodel> dust_pars<stdmodel>(cpp11::list user) {
  typedef typename stdmodel::real_type real_type;
  auto shared = std::make_shared<stdmodel::shared_type>();
  stdmodel::internal_type internal;
  shared->initial_inc_msm = 0;
  shared->initial_inc_r = 0;
  shared->initial_time = 0;
  shared->E_r_ini = NA_REAL;
  shared->I_r_ini = NA_REAL;
  shared->N = NA_REAL;
  shared->N_msm = NA_REAL;
  shared->N_steps = NA_REAL;
  shared->R_msm_ini = NA_REAL;
  shared->R_r_ini = NA_REAL;
  shared->S_r_ini = NA_REAL;
  shared->beta_ns = NA_REAL;
  shared->beta_s = NA_REAL;
  shared->infectious_periode = NA_REAL;
  shared->latent_periode = NA_REAL;
  shared->dt = 1;
  shared->n = 4;
  shared->E_r_ini = user_get_scalar<real_type>(user, "E_r_ini", shared->E_r_ini, NA_REAL, NA_REAL);
  shared->I_r_ini = user_get_scalar<real_type>(user, "I_r_ini", shared->I_r_ini, NA_REAL, NA_REAL);
  shared->N = user_get_scalar<real_type>(user, "N", shared->N, NA_REAL, NA_REAL);
  shared->N_msm = user_get_scalar<real_type>(user, "N_msm", shared->N_msm, NA_REAL, NA_REAL);
  shared->N_steps = user_get_scalar<real_type>(user, "N_steps", shared->N_steps, NA_REAL, NA_REAL);
  shared->R_msm_ini = user_get_scalar<real_type>(user, "R_msm_ini", shared->R_msm_ini, NA_REAL, NA_REAL);
  shared->R_r_ini = user_get_scalar<real_type>(user, "R_r_ini", shared->R_r_ini, NA_REAL, NA_REAL);
  shared->S_r_ini = user_get_scalar<real_type>(user, "S_r_ini", shared->S_r_ini, NA_REAL, NA_REAL);
  shared->beta_ns = user_get_scalar<real_type>(user, "beta_ns", shared->beta_ns, NA_REAL, NA_REAL);
  shared->beta_s = user_get_scalar<real_type>(user, "beta_s", shared->beta_s, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->infectious_periode = user_get_scalar<real_type>(user, "infectious_periode", shared->infectious_periode, NA_REAL, NA_REAL);
  shared->latent_periode = user_get_scalar<real_type>(user, "latent_periode", shared->latent_periode, NA_REAL, NA_REAL);
  shared->n = user_get_scalar<int>(user, "n", shared->n, NA_REAL, NA_REAL);
  shared->dim_E_msm = shared->n;
  shared->dim_E_msm_ini = shared->n;
  shared->dim_I_msm = shared->n;
  shared->dim_I_msm_ini = shared->n;
  shared->dim_S_msm = shared->n;
  shared->dim_S_msm_ini = shared->n;
  shared->dim_lambda_s_msm_1 = shared->n;
  shared->dim_lambda_s_msm_2 = shared->n;
  shared->dim_n_EI_msm = shared->n;
  shared->dim_n_IR_msm = shared->n;
  shared->dim_n_SI_msm = shared->n;
  shared->dim_p_SI_msm = shared->n;
  shared->dim_weights = shared->n;
  shared->initial_E_r = shared->E_r_ini;
  shared->initial_I_r = shared->I_r_ini;
  shared->initial_R_msm = shared->R_msm_ini;
  shared->initial_R_r = shared->R_r_ini;
  shared->initial_S_r = shared->S_r_ini;
  shared->p_EI = 1 - std::exp(- 1 / (real_type) shared->latent_periode * shared->dt);
  shared->p_IR = 1 - std::exp(- 1 / (real_type) shared->infectious_periode * shared->dt);
  shared->steps_per_day = 1 / (real_type) shared->dt;
  shared->E_msm_ini = user_get_array_fixed<real_type, 1>(user, "E_msm_ini", shared->E_msm_ini, {shared->dim_E_msm_ini}, NA_REAL, NA_REAL);
  shared->I_msm_ini = user_get_array_fixed<real_type, 1>(user, "I_msm_ini", shared->I_msm_ini, {shared->dim_I_msm_ini}, NA_REAL, NA_REAL);
  shared->S_msm_ini = user_get_array_fixed<real_type, 1>(user, "S_msm_ini", shared->S_msm_ini, {shared->dim_S_msm_ini}, NA_REAL, NA_REAL);
  shared->initial_E_msm = std::vector<real_type>(shared->dim_E_msm);
  shared->initial_I_msm = std::vector<real_type>(shared->dim_I_msm);
  shared->initial_S_msm = std::vector<real_type>(shared->dim_S_msm);
  internal.n_EI_msm = std::vector<real_type>(shared->dim_n_EI_msm);
  internal.n_IR_msm = std::vector<real_type>(shared->dim_n_IR_msm);
  internal.n_SI_msm = std::vector<real_type>(shared->dim_n_SI_msm);
  internal.p_SI_msm = std::vector<real_type>(shared->dim_p_SI_msm);
  shared->dim_lambda_s_msm = shared->dim_lambda_s_msm_1 * shared->dim_lambda_s_msm_2;
  shared->offset_variable_E_msm = shared->dim_S_msm + 8;
  shared->offset_variable_I_msm = shared->dim_E_msm + shared->dim_S_msm + 8;
  shared->weights = user_get_array_fixed<real_type, 1>(user, "weights", shared->weights, {shared->dim_weights}, NA_REAL, NA_REAL);
  internal.lambda_s_msm = std::vector<real_type>(shared->dim_lambda_s_msm);
  for (int i = 1; i <= shared->dim_E_msm; ++i) {
    shared->initial_E_msm[i - 1] = shared->E_msm_ini[i - 1];
  }
  for (int i = 1; i <= shared->dim_I_msm; ++i) {
    shared->initial_I_msm[i - 1] = shared->I_msm_ini[i - 1];
  }
  for (int i = 1; i <= shared->dim_S_msm; ++i) {
    shared->initial_S_msm[i - 1] = shared->S_msm_ini[i - 1];
  }
  return dust::pars_type<stdmodel>(shared, internal);
}
template <>
cpp11::sexp dust_info<stdmodel>(const dust::pars_type<stdmodel>& pars) {
  const stdmodel::internal_type internal = pars.internal;
  const std::shared_ptr<const stdmodel::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "R_msm", "inc_msm", "S_r", "E_r", "I_r", "R_r", "inc_r", "S_msm", "E_msm", "I_msm"});
  cpp11::writable::list dim(11);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({shared->dim_S_msm});
  dim[9] = cpp11::writable::integers({shared->dim_E_msm});
  dim[10] = cpp11::writable::integers({shared->dim_I_msm});
  dim.names() = nms;
  cpp11::writable::list index(11);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = integer_sequence(9, shared->dim_S_msm);
  index[9] = integer_sequence(shared->offset_variable_E_msm + 1, shared->dim_E_msm);
  index[10] = integer_sequence(shared->offset_variable_I_msm + 1, shared->dim_I_msm);
  index.names() = nms;
  size_t len = shared->offset_variable_I_msm + shared->dim_I_msm;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_stdmodel_capabilities() {
  return dust::r::dust_capabilities<stdmodel>();
}

cpp11::sexp dust_stdmodel_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<stdmodel>;

SEXP dust_cpu_stdmodel_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                             cpp11::sexp r_n_particles, size_t n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config) {
  return dust::r::dust_cpu_alloc<stdmodel>(r_pars, pars_multi, step, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config);
}

SEXP dust_cpu_stdmodel_run(SEXP ptr, size_t step_end) {
  return dust::r::dust_run<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_stdmodel_simulate(SEXP ptr, cpp11::sexp step_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_stdmodel_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_stdmodel_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_step,
                                               r_set_initial_state);
}

SEXP dust_cpu_stdmodel_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

size_t dust_cpu_stdmodel_step(SEXP ptr) {
  return dust::r::dust_step<model_cpu>(ptr);
}

void dust_cpu_stdmodel_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_stdmodel_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_stdmodel_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_stdmodel_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_stdmodel_set_data(SEXP ptr, cpp11::list data,
                                       bool shared) {
  dust::r::dust_set_data<model_cpu>(ptr, data, shared);
  return R_NilValue;
}

SEXP dust_cpu_stdmodel_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_stdmodel_filter(SEXP ptr, SEXP step_end,
                                     bool save_trajectories,
                                     cpp11::sexp step_snapshot,
                                     cpp11::sexp min_log_likelihood) {
  return dust::r::dust_filter<model_cpu>(ptr, step_end,
                                                save_trajectories,
                                                step_snapshot,
                                                min_log_likelihood);
}

void dust_cpu_stdmodel_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_stdmodel_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}
