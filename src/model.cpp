// Generated by dust (version 0.11.9) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_model_capabilities();

[[cpp11::register]]
cpp11::sexp dust_model_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_model_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config);

[[cpp11::register]]
SEXP dust_cpu_model_run(SEXP ptr, size_t step_end);

[[cpp11::register]]
SEXP dust_cpu_model_simulate(SEXP ptr, cpp11::sexp step_end);

[[cpp11::register]]
SEXP dust_cpu_model_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_model_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state);

[[cpp11::register]]
SEXP dust_cpu_model_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
size_t dust_cpu_model_step(SEXP ptr);

[[cpp11::register]]
void dust_cpu_model_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_model_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_model_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_model_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_model_set_data(SEXP ptr, cpp11::list data);

[[cpp11::register]]
SEXP dust_cpu_model_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_model_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot);

[[cpp11::register]]
void dust_cpu_model_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_model_n_state(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.2.13) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum4(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int dim_x_1, int dim_x_12, int dim_x_123);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum5(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int from_i5, int to_i5, int dim_x_1, int dim_x_12, int dim_x_123, int dim_x_1234);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}
// [[dust::class(model)]]
// [[dust::param(I_ini, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_steps, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S_ini, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(T_waning, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(asympt_frac, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(asympt_infect, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_day, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_strain, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(cross_protection, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(hosp_prob, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(icu_prob, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(import_vec, has_default = FALSE, default_value = NULL, rank = 4, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(infectious_period, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(latent_period, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(length_hosp, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(length_icu, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(mixing_matrix, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_strain, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_vac, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(post_icu, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(pre_icu, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(pre_sympt_infect, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(pre_sympt_period, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(prob_death_hosp, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(prob_death_icu, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(prob_death_non_hosp, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rand_beta, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rand_beta_factors, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(susceptibility, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(susceptibility_asymp, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(susceptibility_symp, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(symp_trans, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sympt_frac, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(time_before_death, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(time_before_death_hosp, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(time_before_death_icu, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(transmisibility, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vaccinations, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(waning_immunity_vax, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(waning_inf, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(A_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(B_D_H_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(B_D_ICU_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(B_D_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(D_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Ea_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Es_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(H_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ICU_H_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ICU_P_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ICU_R_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(I_imp_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(P_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(R_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_cut_peak, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_cut_peak_param, has_default = TRUE, default_value = 0L, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_dynamic_change, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_norm, has_default = TRUE, default_value = 0L, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(change_factor, has_default = TRUE, default_value = 1L, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dyn_change, has_default = TRUE, default_value = 0L, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n, has_default = TRUE, default_value = 198L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rand_beta_sd, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(threshold, has_default = TRUE, default_value = 100L, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(threshold_beta, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(threshold_ini, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(threshold_max, has_default = TRUE, default_value = 0.2, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(threshold_min, has_default = TRUE, default_value = 0.05, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(tot_hosp_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(tot_infected_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(tot_resp_ini, has_default = TRUE, default_value = 0L, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(waning_immunity, has_default = TRUE, default_value = 10000L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class model {
public:
  typedef double real_type;
  typedef dust::random::generator<real_type> rng_state_type;
  typedef dust::no_data data_type;
  struct shared_type {
    std::vector<real_type> A_ini;
    std::vector<real_type> B_D_H_ini;
    std::vector<real_type> B_D_ICU_ini;
    std::vector<real_type> B_D_ini;
    std::vector<real_type> D_ini;
    std::vector<real_type> Ea_ini;
    std::vector<real_type> Es_ini;
    std::vector<real_type> H_ini;
    std::vector<real_type> ICU_H_ini;
    std::vector<real_type> ICU_P_ini;
    std::vector<real_type> ICU_R_ini;
    std::vector<real_type> I_imp_ini;
    std::vector<real_type> I_ini;
    int N_steps;
    std::vector<real_type> P_ini;
    std::vector<real_type> R_ini;
    std::vector<real_type> S_ini;
    std::vector<real_type> T_waning;
    std::vector<real_type> asympt_frac;
    real_type asympt_infect;
    real_type beta_cut_peak;
    std::vector<real_type> beta_cut_peak_param;
    std::vector<real_type> beta_day;
    real_type beta_dynamic_change;
    std::vector<real_type> beta_norm;
    std::vector<real_type> beta_strain;
    std::vector<real_type> change_factor;
    std::vector<real_type> cross_protection;
    int dim_A;
    int dim_A_1;
    int dim_A_12;
    int dim_A_2;
    int dim_A_3;
    int dim_A_ini;
    int dim_A_ini_1;
    int dim_A_ini_12;
    int dim_A_ini_2;
    int dim_A_ini_3;
    int dim_B_D;
    int dim_B_D_1;
    int dim_B_D_12;
    int dim_B_D_2;
    int dim_B_D_3;
    int dim_B_D_H;
    int dim_B_D_H_1;
    int dim_B_D_H_12;
    int dim_B_D_H_2;
    int dim_B_D_H_3;
    int dim_B_D_H_ini;
    int dim_B_D_H_ini_1;
    int dim_B_D_H_ini_12;
    int dim_B_D_H_ini_2;
    int dim_B_D_H_ini_3;
    int dim_B_D_ICU;
    int dim_B_D_ICU_1;
    int dim_B_D_ICU_12;
    int dim_B_D_ICU_2;
    int dim_B_D_ICU_3;
    int dim_B_D_ICU_ini;
    int dim_B_D_ICU_ini_1;
    int dim_B_D_ICU_ini_12;
    int dim_B_D_ICU_ini_2;
    int dim_B_D_ICU_ini_3;
    int dim_B_D_ini;
    int dim_B_D_ini_1;
    int dim_B_D_ini_12;
    int dim_B_D_ini_2;
    int dim_B_D_ini_3;
    int dim_D;
    int dim_D_1;
    int dim_D_12;
    int dim_D_2;
    int dim_D_3;
    int dim_D_ini;
    int dim_D_ini_1;
    int dim_D_ini_12;
    int dim_D_ini_2;
    int dim_D_ini_3;
    int dim_Ea;
    int dim_Ea_1;
    int dim_Ea_12;
    int dim_Ea_2;
    int dim_Ea_3;
    int dim_Ea_ini;
    int dim_Ea_ini_1;
    int dim_Ea_ini_12;
    int dim_Ea_ini_2;
    int dim_Ea_ini_3;
    int dim_Es;
    int dim_Es_1;
    int dim_Es_12;
    int dim_Es_2;
    int dim_Es_3;
    int dim_Es_ini;
    int dim_Es_ini_1;
    int dim_Es_ini_12;
    int dim_Es_ini_2;
    int dim_Es_ini_3;
    int dim_H;
    int dim_H_1;
    int dim_H_12;
    int dim_H_2;
    int dim_H_3;
    int dim_H_ini;
    int dim_H_ini_1;
    int dim_H_ini_12;
    int dim_H_ini_2;
    int dim_H_ini_3;
    int dim_I;
    int dim_ICU_H;
    int dim_ICU_H_1;
    int dim_ICU_H_12;
    int dim_ICU_H_2;
    int dim_ICU_H_3;
    int dim_ICU_H_ini;
    int dim_ICU_H_ini_1;
    int dim_ICU_H_ini_12;
    int dim_ICU_H_ini_2;
    int dim_ICU_H_ini_3;
    int dim_ICU_P;
    int dim_ICU_P_1;
    int dim_ICU_P_12;
    int dim_ICU_P_2;
    int dim_ICU_P_3;
    int dim_ICU_P_ini;
    int dim_ICU_P_ini_1;
    int dim_ICU_P_ini_12;
    int dim_ICU_P_ini_2;
    int dim_ICU_P_ini_3;
    int dim_ICU_R;
    int dim_ICU_R_1;
    int dim_ICU_R_12;
    int dim_ICU_R_2;
    int dim_ICU_R_3;
    int dim_ICU_R_ini;
    int dim_ICU_R_ini_1;
    int dim_ICU_R_ini_12;
    int dim_ICU_R_ini_2;
    int dim_ICU_R_ini_3;
    int dim_I_1;
    int dim_I_12;
    int dim_I_2;
    int dim_I_3;
    int dim_I_imp_ini;
    int dim_I_imp_ini_1;
    int dim_I_imp_ini_12;
    int dim_I_imp_ini_2;
    int dim_I_imp_ini_3;
    int dim_I_ini;
    int dim_I_ini_1;
    int dim_I_ini_12;
    int dim_I_ini_2;
    int dim_I_ini_3;
    int dim_N;
    int dim_N_1;
    int dim_N_2;
    int dim_N_imp;
    int dim_N_imp_1;
    int dim_N_imp_12;
    int dim_N_imp_2;
    int dim_N_imp_3;
    int dim_P;
    int dim_P_1;
    int dim_P_12;
    int dim_P_2;
    int dim_P_3;
    int dim_P_ini;
    int dim_P_ini_1;
    int dim_P_ini_12;
    int dim_P_ini_2;
    int dim_P_ini_3;
    int dim_R;
    int dim_R_1;
    int dim_R_12;
    int dim_R_2;
    int dim_R_3;
    int dim_R_ini;
    int dim_R_ini_1;
    int dim_R_ini_12;
    int dim_R_ini_2;
    int dim_R_ini_3;
    int dim_S;
    int dim_S_1;
    int dim_S_2;
    int dim_S_ini;
    int dim_S_ini_1;
    int dim_S_ini_2;
    int dim_T_waning;
    int dim_T_waning_1;
    int dim_T_waning_2;
    int dim_asympt_frac;
    int dim_asympt_frac_1;
    int dim_asympt_frac_12;
    int dim_asympt_frac_2;
    int dim_asympt_frac_3;
    int dim_beta;
    int dim_beta_cut_peak_param;
    int dim_beta_day;
    int dim_beta_day_1;
    int dim_beta_day_2;
    int dim_beta_norm;
    int dim_beta_strain;
    int dim_change_factor;
    int dim_cross_protection;
    int dim_cross_protection_1;
    int dim_cross_protection_2;
    int dim_dyn_change;
    int dim_hosp_inc;
    int dim_hosp_prob;
    int dim_hosp_prob_1;
    int dim_hosp_prob_12;
    int dim_hosp_prob_2;
    int dim_hosp_prob_3;
    int dim_icu_prob;
    int dim_icu_prob_1;
    int dim_icu_prob_12;
    int dim_icu_prob_2;
    int dim_icu_prob_3;
    int dim_import_vec;
    int dim_import_vec_1;
    int dim_import_vec_12;
    int dim_import_vec_123;
    int dim_import_vec_2;
    int dim_import_vec_3;
    int dim_import_vec_4;
    int dim_lambda_ij;
    int dim_lambda_ij_1;
    int dim_lambda_ij_12;
    int dim_lambda_ij_123;
    int dim_lambda_ij_1234;
    int dim_lambda_ij_2;
    int dim_lambda_ij_3;
    int dim_lambda_ij_4;
    int dim_lambda_ij_5;
    int dim_length_hosp;
    int dim_length_hosp_1;
    int dim_length_hosp_12;
    int dim_length_hosp_2;
    int dim_length_hosp_3;
    int dim_length_icu;
    int dim_length_icu_1;
    int dim_length_icu_12;
    int dim_length_icu_2;
    int dim_length_icu_3;
    int dim_mixing_matrix;
    int dim_mixing_matrix_1;
    int dim_mixing_matrix_2;
    int dim_n_AR;
    int dim_n_AR_1;
    int dim_n_AR_12;
    int dim_n_AR_2;
    int dim_n_AR_3;
    int dim_n_B_D_D;
    int dim_n_B_D_D_1;
    int dim_n_B_D_D_12;
    int dim_n_B_D_D_2;
    int dim_n_B_D_D_3;
    int dim_n_B_H_D;
    int dim_n_B_H_D_1;
    int dim_n_B_H_D_12;
    int dim_n_B_H_D_2;
    int dim_n_B_H_D_3;
    int dim_n_B_ICU_D;
    int dim_n_B_ICU_D_1;
    int dim_n_B_ICU_D_12;
    int dim_n_B_ICU_D_2;
    int dim_n_B_ICU_D_3;
    int dim_n_EaA;
    int dim_n_EaA_1;
    int dim_n_EaA_12;
    int dim_n_EaA_2;
    int dim_n_EaA_3;
    int dim_n_EsI;
    int dim_n_EsI_1;
    int dim_n_EsI_12;
    int dim_n_EsI_2;
    int dim_n_EsI_3;
    int dim_n_H;
    int dim_n_HD;
    int dim_n_HD_1;
    int dim_n_HD_12;
    int dim_n_HD_2;
    int dim_n_HD_3;
    int dim_n_HR;
    int dim_n_HR_1;
    int dim_n_HR_12;
    int dim_n_HR_2;
    int dim_n_HR_3;
    int dim_n_H_1;
    int dim_n_H_12;
    int dim_n_H_2;
    int dim_n_H_3;
    int dim_n_I;
    int dim_n_ICU_D;
    int dim_n_ICU_D_1;
    int dim_n_ICU_D_12;
    int dim_n_ICU_D_2;
    int dim_n_ICU_D_3;
    int dim_n_ICU_HR;
    int dim_n_ICU_HR_1;
    int dim_n_ICU_HR_12;
    int dim_n_ICU_HR_2;
    int dim_n_ICU_HR_3;
    int dim_n_ICU_P;
    int dim_n_ICU_P_1;
    int dim_n_ICU_P_12;
    int dim_n_ICU_P_2;
    int dim_n_ICU_P_3;
    int dim_n_ICU_R;
    int dim_n_ICU_RP;
    int dim_n_ICU_RP_1;
    int dim_n_ICU_RP_12;
    int dim_n_ICU_RP_2;
    int dim_n_ICU_RP_3;
    int dim_n_ICU_R_1;
    int dim_n_ICU_R_12;
    int dim_n_ICU_R_2;
    int dim_n_ICU_R_3;
    int dim_n_ID;
    int dim_n_ID_1;
    int dim_n_ID_12;
    int dim_n_ID_2;
    int dim_n_ID_3;
    int dim_n_IH;
    int dim_n_IH_1;
    int dim_n_IH_12;
    int dim_n_IH_2;
    int dim_n_IH_3;
    int dim_n_IICU;
    int dim_n_IICU_1;
    int dim_n_IICU_12;
    int dim_n_IICU_2;
    int dim_n_IICU_3;
    int dim_n_IR;
    int dim_n_IR_1;
    int dim_n_IR_12;
    int dim_n_IR_2;
    int dim_n_IR_3;
    int dim_n_I_1;
    int dim_n_I_12;
    int dim_n_I_2;
    int dim_n_I_3;
    int dim_n_PI;
    int dim_n_PI_1;
    int dim_n_PI_12;
    int dim_n_PI_2;
    int dim_n_PI_3;
    int dim_n_RI;
    int dim_n_RIA;
    int dim_n_RIA_1;
    int dim_n_RIA_12;
    int dim_n_RIA_2;
    int dim_n_RIA_3;
    int dim_n_RIS;
    int dim_n_RIS_1;
    int dim_n_RIS_12;
    int dim_n_RIS_2;
    int dim_n_RIS_3;
    int dim_n_RI_1;
    int dim_n_RI_12;
    int dim_n_RI_2;
    int dim_n_RI_3;
    int dim_n_RI_op;
    int dim_n_RI_op_1;
    int dim_n_RI_op_12;
    int dim_n_RI_op_2;
    int dim_n_RI_op_3;
    int dim_n_RS;
    int dim_n_RS_1;
    int dim_n_RS_12;
    int dim_n_RS_2;
    int dim_n_RS_3;
    int dim_n_SE;
    int dim_n_SE_1;
    int dim_n_SE_12;
    int dim_n_SE_2;
    int dim_n_SE_3;
    int dim_n_SE_tot;
    int dim_n_SE_tot_1;
    int dim_n_SE_tot_2;
    int dim_n_SEa;
    int dim_n_SEa_1;
    int dim_n_SEa_12;
    int dim_n_SEa_2;
    int dim_n_SEa_3;
    int dim_n_SEi;
    int dim_n_SEi_1;
    int dim_n_SEi_12;
    int dim_n_SEi_2;
    int dim_n_SEi_3;
    int dim_n_waning;
    int dim_n_waning_1;
    int dim_n_waning_2;
    int dim_p_HR;
    int dim_p_HR_1;
    int dim_p_HR_12;
    int dim_p_HR_2;
    int dim_p_HR_3;
    int dim_p_ICU_P;
    int dim_p_ICU_PR;
    int dim_p_ICU_PR_1;
    int dim_p_ICU_PR_12;
    int dim_p_ICU_PR_2;
    int dim_p_ICU_PR_3;
    int dim_p_ICU_P_1;
    int dim_p_ICU_P_12;
    int dim_p_ICU_P_2;
    int dim_p_ICU_P_3;
    int dim_p_ICU_R;
    int dim_p_ICU_R_1;
    int dim_p_ICU_R_12;
    int dim_p_ICU_R_2;
    int dim_p_ICU_R_3;
    int dim_p_SE;
    int dim_p_SE_1;
    int dim_p_SE_12;
    int dim_p_SE_2;
    int dim_p_SE_3;
    int dim_p_hosp;
    int dim_p_hosp_1;
    int dim_p_hosp_12;
    int dim_p_hosp_2;
    int dim_p_hosp_3;
    int dim_p_hosp_d;
    int dim_p_hosp_d_1;
    int dim_p_hosp_d_12;
    int dim_p_hosp_d_2;
    int dim_p_hosp_d_3;
    int dim_p_hosp_icu_R;
    int dim_p_hosp_icu_R_1;
    int dim_p_hosp_icu_R_12;
    int dim_p_hosp_icu_R_2;
    int dim_p_hosp_icu_R_3;
    int dim_p_icu;
    int dim_p_icu_1;
    int dim_p_icu_12;
    int dim_p_icu_2;
    int dim_p_icu_3;
    int dim_p_icu_d;
    int dim_p_icu_d_1;
    int dim_p_icu_d_12;
    int dim_p_icu_d_2;
    int dim_p_icu_d_3;
    int dim_p_waning;
    int dim_p_waning_1;
    int dim_p_waning_2;
    int dim_pa;
    int dim_pa_1;
    int dim_pa_12;
    int dim_pa_2;
    int dim_pa_3;
    int dim_post_icu;
    int dim_post_icu_1;
    int dim_post_icu_12;
    int dim_post_icu_2;
    int dim_post_icu_3;
    int dim_pre_icu;
    int dim_pre_icu_1;
    int dim_pre_icu_12;
    int dim_pre_icu_2;
    int dim_pre_icu_3;
    int dim_prob_death_hosp;
    int dim_prob_death_hosp_1;
    int dim_prob_death_hosp_12;
    int dim_prob_death_hosp_2;
    int dim_prob_death_hosp_3;
    int dim_prob_death_icu;
    int dim_prob_death_icu_1;
    int dim_prob_death_icu_12;
    int dim_prob_death_icu_2;
    int dim_prob_death_icu_3;
    int dim_prob_death_non_hosp;
    int dim_prob_death_non_hosp_1;
    int dim_prob_death_non_hosp_12;
    int dim_prob_death_non_hosp_2;
    int dim_prob_death_non_hosp_3;
    int dim_rand_beta_factors;
    int dim_rel_strain;
    int dim_rel_strain_1;
    int dim_rel_strain_12;
    int dim_rel_strain_2;
    int dim_rel_strain_3;
    int dim_susceptibility;
    int dim_susceptibility_1;
    int dim_susceptibility_12;
    int dim_susceptibility_2;
    int dim_susceptibility_3;
    int dim_susceptibility_asymp;
    int dim_susceptibility_asymp_1;
    int dim_susceptibility_asymp_12;
    int dim_susceptibility_asymp_2;
    int dim_susceptibility_asymp_3;
    int dim_susceptibility_symp;
    int dim_susceptibility_symp_1;
    int dim_susceptibility_symp_12;
    int dim_susceptibility_symp_2;
    int dim_susceptibility_symp_3;
    int dim_symp_asymp_effect;
    int dim_symp_asymp_effect_1;
    int dim_symp_asymp_effect_12;
    int dim_symp_asymp_effect_2;
    int dim_symp_asymp_effect_3;
    int dim_symp_trans;
    int dim_symp_trans_1;
    int dim_symp_trans_12;
    int dim_symp_trans_2;
    int dim_symp_trans_3;
    int dim_sympt_frac;
    int dim_sympt_frac_1;
    int dim_sympt_frac_12;
    int dim_sympt_frac_2;
    int dim_sympt_frac_3;
    int dim_threshold;
    int dim_tot_hosp;
    int dim_tot_hosp_1;
    int dim_tot_hosp_12;
    int dim_tot_hosp_2;
    int dim_tot_hosp_3;
    int dim_tot_hosp_ini;
    int dim_tot_hosp_ini_1;
    int dim_tot_hosp_ini_12;
    int dim_tot_hosp_ini_2;
    int dim_tot_hosp_ini_3;
    int dim_tot_infected;
    int dim_tot_infected_1;
    int dim_tot_infected_12;
    int dim_tot_infected_2;
    int dim_tot_infected_3;
    int dim_tot_infected_ini;
    int dim_tot_infected_ini_1;
    int dim_tot_infected_ini_12;
    int dim_tot_infected_ini_2;
    int dim_tot_infected_ini_3;
    int dim_tot_resp;
    int dim_tot_resp_1;
    int dim_tot_resp_12;
    int dim_tot_resp_2;
    int dim_tot_resp_3;
    int dim_tot_resp_ini;
    int dim_tot_resp_ini_1;
    int dim_tot_resp_ini_12;
    int dim_tot_resp_ini_2;
    int dim_tot_resp_ini_3;
    int dim_transmisibility;
    int dim_transmisibility_1;
    int dim_transmisibility_12;
    int dim_transmisibility_2;
    int dim_transmisibility_3;
    int dim_vaccinations;
    int dim_vaccinations_1;
    int dim_vaccinations_12;
    int dim_vaccinations_2;
    int dim_vaccinations_3;
    int dim_vax_time_step;
    int dim_vax_time_step_1;
    int dim_vax_time_step_2;
    int dim_waning_immunity_vax;
    int dim_waning_immunity_vax_1;
    int dim_waning_immunity_vax_12;
    int dim_waning_immunity_vax_2;
    int dim_waning_immunity_vax_3;
    real_type dt;
    std::vector<real_type> dyn_change;
    std::vector<real_type> hosp_prob;
    std::vector<real_type> icu_prob;
    std::vector<real_type> import_vec;
    real_type infectious_period;
    std::vector<real_type> initial_A;
    std::vector<real_type> initial_B_D;
    std::vector<real_type> initial_B_D_H;
    std::vector<real_type> initial_B_D_ICU;
    std::vector<real_type> initial_D;
    std::vector<real_type> initial_Ea;
    std::vector<real_type> initial_Es;
    std::vector<real_type> initial_H;
    std::vector<real_type> initial_I;
    std::vector<real_type> initial_ICU_H;
    std::vector<real_type> initial_ICU_P;
    std::vector<real_type> initial_ICU_R;
    std::vector<real_type> initial_P;
    std::vector<real_type> initial_R;
    std::vector<real_type> initial_S;
    real_type initial_beta_dyn_change;
    real_type initial_beta_thresh;
    real_type initial_e_int;
    std::vector<real_type> initial_hosp_inc;
    real_type initial_incidence_int;
    real_type initial_log_beta;
    real_type initial_peak_trigger;
    real_type initial_time;
    real_type initial_tot_N;
    std::vector<real_type> initial_tot_hosp;
    std::vector<real_type> initial_tot_infected;
    std::vector<real_type> initial_tot_resp;
    real_type initial_trigger;
    real_type latent_period;
    std::vector<real_type> length_hosp;
    std::vector<real_type> length_icu;
    std::vector<real_type> mixing_matrix;
    int n;
    int n_strain;
    int n_vac;
    int offset_variable_A;
    int offset_variable_B_D;
    int offset_variable_B_D_H;
    int offset_variable_B_D_ICU;
    int offset_variable_D;
    int offset_variable_Ea;
    int offset_variable_Es;
    int offset_variable_H;
    int offset_variable_I;
    int offset_variable_ICU_H;
    int offset_variable_ICU_P;
    int offset_variable_ICU_R;
    int offset_variable_P;
    int offset_variable_R;
    int offset_variable_S;
    int offset_variable_tot_hosp;
    int offset_variable_tot_infected;
    int offset_variable_tot_resp;
    real_type p_D;
    real_type p_D_H;
    real_type p_D_ICU;
    real_type p_EI;
    std::vector<real_type> p_HR;
    std::vector<real_type> p_ICU_P;
    std::vector<real_type> p_ICU_PR;
    std::vector<real_type> p_ICU_R;
    real_type p_IR;
    real_type p_PI;
    std::vector<real_type> p_hosp;
    std::vector<real_type> p_hosp_d;
    std::vector<real_type> p_hosp_icu_R;
    std::vector<real_type> p_icu;
    std::vector<real_type> p_icu_d;
    std::vector<real_type> p_waning;
    real_type p_waning_inf;
    std::vector<real_type> pa;
    std::vector<real_type> post_icu;
    std::vector<real_type> pre_icu;
    real_type pre_sympt_infect;
    real_type pre_sympt_period;
    std::vector<real_type> prob_death_hosp;
    std::vector<real_type> prob_death_icu;
    std::vector<real_type> prob_death_non_hosp;
    real_type rand_beta;
    std::vector<real_type> rand_beta_factors;
    real_type rand_beta_sd;
    real_type steps_per_day;
    std::vector<real_type> susceptibility;
    std::vector<real_type> susceptibility_asymp;
    std::vector<real_type> susceptibility_symp;
    std::vector<real_type> symp_asymp_effect;
    std::vector<real_type> symp_trans;
    std::vector<real_type> sympt_frac;
    std::vector<real_type> threshold;
    real_type threshold_beta;
    real_type threshold_ini;
    real_type threshold_max;
    real_type threshold_min;
    real_type time_before_death;
    real_type time_before_death_hosp;
    real_type time_before_death_icu;
    std::vector<real_type> tot_hosp_ini;
    std::vector<real_type> tot_infected_ini;
    std::vector<real_type> tot_resp_ini;
    std::vector<real_type> transmisibility;
    std::vector<real_type> vaccinations;
    real_type waning_immunity;
    std::vector<real_type> waning_immunity_vax;
    real_type waning_inf;
  };
  struct internal_type {
    std::vector<real_type> N;
    std::vector<real_type> N_imp;
    std::vector<real_type> beta;
    std::vector<real_type> lambda_ij;
    std::vector<real_type> n_AR;
    std::vector<real_type> n_B_D_D;
    std::vector<real_type> n_B_H_D;
    std::vector<real_type> n_B_ICU_D;
    std::vector<real_type> n_EaA;
    std::vector<real_type> n_EsI;
    std::vector<real_type> n_H;
    std::vector<real_type> n_HD;
    std::vector<real_type> n_HR;
    std::vector<real_type> n_I;
    std::vector<real_type> n_ICU_D;
    std::vector<real_type> n_ICU_HR;
    std::vector<real_type> n_ICU_P;
    std::vector<real_type> n_ICU_R;
    std::vector<real_type> n_ICU_RP;
    std::vector<real_type> n_ID;
    std::vector<real_type> n_IH;
    std::vector<real_type> n_IICU;
    std::vector<real_type> n_IR;
    std::vector<real_type> n_PI;
    std::vector<real_type> n_RI;
    std::vector<real_type> n_RIA;
    std::vector<real_type> n_RIS;
    std::vector<real_type> n_RI_op;
    std::vector<real_type> n_RS;
    std::vector<real_type> n_SE;
    std::vector<real_type> n_SE_tot;
    std::vector<real_type> n_SEa;
    std::vector<real_type> n_SEi;
    std::vector<real_type> n_waning;
    std::vector<real_type> p_SE;
    std::vector<real_type> rel_strain;
    std::vector<real_type> vax_time_step;
  };
  model(const dust::pars_type<model>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + shared->dim_tot_hosp + shared->dim_tot_infected + shared->dim_tot_resp + 9;
  }
  std::vector<real_type> initial(size_t step) {
    std::vector<real_type> state(shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + shared->dim_tot_hosp + shared->dim_tot_infected + shared->dim_tot_resp + 9);
    state[0] = shared->initial_time;
    state[1] = shared->initial_beta_dyn_change;
    state[2] = shared->initial_trigger;
    state[3] = shared->initial_incidence_int;
    state[4] = shared->initial_peak_trigger;
    state[5] = shared->initial_e_int;
    state[6] = shared->initial_log_beta;
    state[7] = shared->initial_beta_thresh;
    state[8] = shared->initial_tot_N;
    std::copy(shared->initial_hosp_inc.begin(), shared->initial_hosp_inc.end(), state.begin() + 9);
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + shared->offset_variable_S);
    std::copy(shared->initial_Ea.begin(), shared->initial_Ea.end(), state.begin() + shared->offset_variable_Ea);
    std::copy(shared->initial_Es.begin(), shared->initial_Es.end(), state.begin() + shared->offset_variable_Es);
    std::copy(shared->initial_P.begin(), shared->initial_P.end(), state.begin() + shared->offset_variable_P);
    std::copy(shared->initial_I.begin(), shared->initial_I.end(), state.begin() + shared->offset_variable_I);
    std::copy(shared->initial_A.begin(), shared->initial_A.end(), state.begin() + shared->offset_variable_A);
    std::copy(shared->initial_H.begin(), shared->initial_H.end(), state.begin() + shared->offset_variable_H);
    std::copy(shared->initial_ICU_H.begin(), shared->initial_ICU_H.end(), state.begin() + shared->offset_variable_ICU_H);
    std::copy(shared->initial_ICU_R.begin(), shared->initial_ICU_R.end(), state.begin() + shared->offset_variable_ICU_R);
    std::copy(shared->initial_ICU_P.begin(), shared->initial_ICU_P.end(), state.begin() + shared->offset_variable_ICU_P);
    std::copy(shared->initial_B_D.begin(), shared->initial_B_D.end(), state.begin() + shared->offset_variable_B_D);
    std::copy(shared->initial_B_D_H.begin(), shared->initial_B_D_H.end(), state.begin() + shared->offset_variable_B_D_H);
    std::copy(shared->initial_B_D_ICU.begin(), shared->initial_B_D_ICU.end(), state.begin() + shared->offset_variable_B_D_ICU);
    std::copy(shared->initial_R.begin(), shared->initial_R.end(), state.begin() + shared->offset_variable_R);
    std::copy(shared->initial_D.begin(), shared->initial_D.end(), state.begin() + shared->offset_variable_D);
    std::copy(shared->initial_tot_infected.begin(), shared->initial_tot_infected.end(), state.begin() + shared->offset_variable_tot_infected);
    std::copy(shared->initial_tot_hosp.begin(), shared->initial_tot_hosp.end(), state.begin() + shared->offset_variable_tot_hosp);
    std::copy(shared->initial_tot_resp.begin(), shared->initial_tot_resp.end(), state.begin() + shared->offset_variable_tot_resp);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type time = state[0];
    const real_type trigger = state[2];
    const real_type beta_dyn_change = state[1];
    const real_type incidence_int = state[3];
    const real_type e_int = state[5];
    const real_type peak_trigger = state[4];
    const real_type * S = state + shared->offset_variable_S;
    const real_type log_beta = state[6];
    const real_type beta_thresh = state[7];
    const real_type * Ea = state + shared->offset_variable_Ea;
    const real_type * Es = state + shared->offset_variable_Es;
    const real_type * P = state + shared->offset_variable_P;
    const real_type * I = state + shared->offset_variable_I;
    const real_type * A = state + shared->offset_variable_A;
    const real_type * H = state + shared->offset_variable_H;
    const real_type * ICU_H = state + shared->offset_variable_ICU_H;
    const real_type * ICU_R = state + shared->offset_variable_ICU_R;
    const real_type * ICU_P = state + shared->offset_variable_ICU_P;
    const real_type * B_D = state + shared->offset_variable_B_D;
    const real_type * B_D_H = state + shared->offset_variable_B_D_H;
    const real_type * B_D_ICU = state + shared->offset_variable_B_D_ICU;
    const real_type * R = state + shared->offset_variable_R;
    const real_type * D = state + shared->offset_variable_D;
    const real_type * tot_infected = state + shared->offset_variable_tot_infected;
    const real_type * hosp_inc = state + 9;
    const real_type * tot_hosp = state + shared->offset_variable_tot_hosp;
    const real_type * tot_resp = state + shared->offset_variable_tot_resp;
    state_next[6] = log_beta + dust::random::normal<real_type>(rng_state, 0, shared->rand_beta_sd);
    state_next[0] = (step + 1) * shared->dt;
    real_type beta_cp = (peak_trigger == 0 ? shared->beta_cut_peak_param[0] : shared->beta_cut_peak_param[1]);
    real_type current_infected = odin_sum3<real_type>(I, 0, shared->dim_I_1, 0, shared->dim_I_2, 0, shared->dim_I_3, shared->dim_I_1, shared->dim_I_12);
    real_type current_tot_in_hosp = odin_sum3<real_type>(H, 0, shared->dim_H_1, 0, shared->dim_H_2, 0, shared->dim_H_3, shared->dim_H_1, shared->dim_H_12) + odin_sum3<real_type>(ICU_H, 0, shared->dim_ICU_H_1, 0, shared->dim_ICU_H_2, 0, shared->dim_ICU_H_3, shared->dim_ICU_H_1, shared->dim_ICU_H_12) + odin_sum3<real_type>(ICU_R, 0, shared->dim_ICU_R_1, 0, shared->dim_ICU_R_2, 0, shared->dim_ICU_R_3, shared->dim_ICU_R_1, shared->dim_ICU_R_12) + odin_sum3<real_type>(ICU_P, 0, shared->dim_ICU_P_1, 0, shared->dim_ICU_P_2, 0, shared->dim_ICU_P_3, shared->dim_ICU_P_1, shared->dim_ICU_P_12);
    state_next[1] = (shared->beta_cut_peak == 1 && peak_trigger == 1 ? beta_cp : shared->dyn_change[0] * (1 - shared->dyn_change[1] * (shared->dyn_change[2] + shared->dyn_change[3] * (odin_sum3<real_type>(I, 0, shared->dim_I_1, 0, shared->dim_I_2, 0, shared->dim_I_3, shared->dim_I_1, shared->dim_I_12) + odin_sum3<real_type>(P, 0, shared->dim_P_1, 0, shared->dim_P_2, 0, shared->dim_P_3, shared->dim_P_1, shared->dim_P_12) + odin_sum3<real_type>(A, 0, shared->dim_A_1, 0, shared->dim_A_2, 0, shared->dim_A_3, shared->dim_A_1, shared->dim_A_12)) / (real_type) odin_sum1<real_type>(shared->beta_norm.data(), 0, shared->dim_beta_norm))));
    for (int i = 1; i <= shared->dim_N_1; ++i) {
      for (int j = 1; j <= shared->dim_N_2; ++j) {
        internal.N[i - 1 + shared->dim_N_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + odin_sum3<real_type>(Ea, i - 1, i, j - 1, j, 0, shared->dim_Ea_3, shared->dim_Ea_1, shared->dim_Ea_12) + odin_sum3<real_type>(Es, i - 1, i, j - 1, j, 0, shared->dim_Es_3, shared->dim_Es_1, shared->dim_Es_12) + odin_sum3<real_type>(P, i - 1, i, j - 1, j, 0, shared->dim_P_3, shared->dim_P_1, shared->dim_P_12) + odin_sum3<real_type>(I, i - 1, i, j - 1, j, 0, shared->dim_I_3, shared->dim_I_1, shared->dim_I_12) + odin_sum3<real_type>(A, i - 1, i, j - 1, j, 0, shared->dim_A_3, shared->dim_A_1, shared->dim_A_12) + odin_sum3<real_type>(H, i - 1, i, j - 1, j, 0, shared->dim_H_3, shared->dim_H_1, shared->dim_H_12) + odin_sum3<real_type>(ICU_H, i - 1, i, j - 1, j, 0, shared->dim_ICU_H_3, shared->dim_ICU_H_1, shared->dim_ICU_H_12) + odin_sum3<real_type>(ICU_R, i - 1, i, j - 1, j, 0, shared->dim_ICU_R_3, shared->dim_ICU_R_1, shared->dim_ICU_R_12) + odin_sum3<real_type>(ICU_P, i - 1, i, j - 1, j, 0, shared->dim_ICU_P_3, shared->dim_ICU_P_1, shared->dim_ICU_P_12) + odin_sum3<real_type>(B_D, i - 1, i, j - 1, j, 0, shared->dim_B_D_3, shared->dim_B_D_1, shared->dim_B_D_12) + odin_sum3<real_type>(B_D_ICU, i - 1, i, j - 1, j, 0, shared->dim_B_D_ICU_3, shared->dim_B_D_ICU_1, shared->dim_B_D_ICU_12) + odin_sum3<real_type>(B_D_H, i - 1, i, j - 1, j, 0, shared->dim_B_D_H_3, shared->dim_B_D_H_1, shared->dim_B_D_H_12) + odin_sum3<real_type>(R, i - 1, i, j - 1, j, 0, shared->dim_R_3, shared->dim_R_1, shared->dim_R_12) + odin_sum3<real_type>(D, i - 1, i, j - 1, j, 0, shared->dim_D_3, shared->dim_D_1, shared->dim_D_12);
      }
    }
    for (int i = 1; i <= shared->dim_N_imp_1; ++i) {
      for (int j = 1; j <= shared->dim_N_imp_2; ++j) {
        for (int k = 1; k <= shared->dim_N_imp_3; ++k) {
          internal.N_imp[i - 1 + shared->dim_N_imp_1 * (j - 1) + shared->dim_N_imp_12 * (k - 1)] = shared->import_vec[shared->dim_import_vec_123 * (k - 1) + shared->dim_import_vec_12 * (j - 1) + shared->dim_import_vec_1 * (i - 1) + step - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_beta; ++i) {
      internal.beta[i - 1] = (shared->rand_beta == 1 ? std::exp(log_beta) * shared->rand_beta_factors[i - 1] : ((shared->threshold_beta == 1 ? beta_thresh * shared->rand_beta_factors[i - 1] : ((shared->beta_dynamic_change == 1 ? beta_dyn_change * shared->rand_beta_factors[i - 1] : ((shared->beta_cut_peak == 1 ? beta_cp * shared->rand_beta_factors[i - 1] : shared->beta_day[shared->dim_beta_day_1 * (i - 1) + step - 1])))))));
    }
    for (int i = 1; i <= shared->dim_n_AR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_AR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_AR_3; ++k) {
          internal.n_AR[i - 1 + shared->dim_n_AR_1 * (j - 1) + shared->dim_n_AR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, A[shared->dim_A_12 * (k - 1) + shared->dim_A_1 * (j - 1) + i - 1], shared->p_IR);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_B_D_D_1; ++i) {
      for (int j = 1; j <= shared->dim_n_B_D_D_2; ++j) {
        for (int k = 1; k <= shared->dim_n_B_D_D_3; ++k) {
          internal.n_B_D_D[i - 1 + shared->dim_n_B_D_D_1 * (j - 1) + shared->dim_n_B_D_D_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, B_D[shared->dim_B_D_12 * (k - 1) + shared->dim_B_D_1 * (j - 1) + i - 1], shared->p_D);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_B_H_D_1; ++i) {
      for (int j = 1; j <= shared->dim_n_B_H_D_2; ++j) {
        for (int k = 1; k <= shared->dim_n_B_H_D_3; ++k) {
          internal.n_B_H_D[i - 1 + shared->dim_n_B_H_D_1 * (j - 1) + shared->dim_n_B_H_D_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, B_D_H[shared->dim_B_D_H_12 * (k - 1) + shared->dim_B_D_H_1 * (j - 1) + i - 1], shared->p_D_H);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_B_ICU_D_1; ++i) {
      for (int j = 1; j <= shared->dim_n_B_ICU_D_2; ++j) {
        for (int k = 1; k <= shared->dim_n_B_ICU_D_3; ++k) {
          internal.n_B_ICU_D[i - 1 + shared->dim_n_B_ICU_D_1 * (j - 1) + shared->dim_n_B_ICU_D_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, B_D_ICU[shared->dim_B_D_ICU_12 * (k - 1) + shared->dim_B_D_ICU_1 * (j - 1) + i - 1], shared->p_D_ICU);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_EaA_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EaA_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EaA_3; ++k) {
          internal.n_EaA[i - 1 + shared->dim_n_EaA_1 * (j - 1) + shared->dim_n_EaA_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, Ea[shared->dim_Ea_12 * (k - 1) + shared->dim_Ea_1 * (j - 1) + i - 1], shared->p_EI);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_EsI_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EsI_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EsI_3; ++k) {
          internal.n_EsI[i - 1 + shared->dim_n_EsI_1 * (j - 1) + shared->dim_n_EsI_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, Es[shared->dim_Es_12 * (k - 1) + shared->dim_Es_1 * (j - 1) + i - 1], shared->p_EI);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_3; ++k) {
          internal.n_I[i - 1 + shared->dim_n_I_1 * (j - 1) + shared->dim_n_I_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I[shared->dim_I_12 * (k - 1) + shared->dim_I_1 * (j - 1) + i - 1], shared->p_IR);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_PI_1; ++i) {
      for (int j = 1; j <= shared->dim_n_PI_2; ++j) {
        for (int k = 1; k <= shared->dim_n_PI_3; ++k) {
          internal.n_PI[i - 1 + shared->dim_n_PI_1 * (j - 1) + shared->dim_n_PI_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, P[shared->dim_P_12 * (k - 1) + shared->dim_P_1 * (j - 1) + i - 1], shared->p_PI);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RS_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RS_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RS_3; ++k) {
          internal.n_RS[i - 1 + shared->dim_n_RS_1 * (j - 1) + shared->dim_n_RS_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, R[shared->dim_R_12 * (k - 1) + shared->dim_R_1 * (j - 1) + i - 1], shared->p_waning_inf);
        }
      }
    }
    real_type r = shared->threshold[0] - current_tot_in_hosp;
    state_next[2] = (current_tot_in_hosp > shared->threshold[1] ? 1 : trigger);
    for (int i = 1; i <= shared->dim_vax_time_step_1; ++i) {
      for (int j = 1; j <= shared->dim_vax_time_step_2; ++j) {
        internal.vax_time_step[i - 1 + shared->dim_vax_time_step_1 * (j - 1)] = shared->vaccinations[shared->dim_vaccinations_12 * (j - 1) + shared->dim_vaccinations_1 * (i - 1) + step - 1];
      }
    }
    for (int i = 1; i <= shared->dim_lambda_ij_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_ij_2; ++j) {
        for (int k = 1; k <= shared->dim_lambda_ij_3; ++k) {
          for (int l = 1; l <= shared->dim_lambda_ij_4; ++l) {
            for (int i5 = 1; i5 <= shared->dim_lambda_ij_5; ++i5) {
              internal.lambda_ij[i - 1 + shared->dim_lambda_ij_1 * (j - 1) + shared->dim_lambda_ij_12 * (k - 1) + shared->dim_lambda_ij_123 * (l - 1) + shared->dim_lambda_ij_1234 * (i5 - 1)] = internal.beta[i - 1] * shared->beta_strain[i5 - 1] * shared->mixing_matrix[shared->dim_mixing_matrix_1 * (k - 1) + i - 1] / (real_type) shared->beta_norm[i - 1] * shared->transmisibility[shared->dim_transmisibility_12 * (i5 - 1) + shared->dim_transmisibility_1 * (l - 1) + k - 1] * (shared->pre_sympt_infect * P[shared->dim_P_12 * (i5 - 1) + shared->dim_P_1 * (l - 1) + k - 1] + shared->symp_trans[shared->dim_symp_trans_12 * (i5 - 1) + shared->dim_symp_trans_1 * (l - 1) + k - 1] * (I[shared->dim_I_12 * (i5 - 1) + shared->dim_I_1 * (l - 1) + k - 1]) + shared->asympt_infect * A[shared->dim_A_12 * (i5 - 1) + shared->dim_A_1 * (l - 1) + k - 1]);
            }
          }
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_H_1; ++i) {
      for (int j = 1; j <= shared->dim_n_H_2; ++j) {
        for (int k = 1; k <= shared->dim_n_H_3; ++k) {
          internal.n_H[i - 1 + shared->dim_n_H_1 * (j - 1) + shared->dim_n_H_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, H[shared->dim_H_12 * (k - 1) + shared->dim_H_1 * (j - 1) + i - 1], shared->p_HR[shared->dim_p_HR_12 * (k - 1) + shared->dim_p_HR_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_HR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_HR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ICU_HR_3; ++k) {
          internal.n_ICU_HR[i - 1 + shared->dim_n_ICU_HR_1 * (j - 1) + shared->dim_n_ICU_HR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, ICU_H[shared->dim_ICU_H_12 * (k - 1) + shared->dim_ICU_H_1 * (j - 1) + i - 1], shared->p_ICU_R[shared->dim_p_ICU_R_12 * (k - 1) + shared->dim_p_ICU_R_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_P_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_P_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ICU_P_3; ++k) {
          internal.n_ICU_P[i - 1 + shared->dim_n_ICU_P_1 * (j - 1) + shared->dim_n_ICU_P_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, ICU_P[shared->dim_ICU_P_12 * (k - 1) + shared->dim_ICU_P_1 * (j - 1) + i - 1], shared->p_ICU_PR[shared->dim_p_ICU_PR_12 * (k - 1) + shared->dim_p_ICU_PR_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_RP_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_RP_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ICU_RP_3; ++k) {
          internal.n_ICU_RP[i - 1 + shared->dim_n_ICU_RP_1 * (j - 1) + shared->dim_n_ICU_RP_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, ICU_R[shared->dim_ICU_R_12 * (k - 1) + shared->dim_ICU_R_1 * (j - 1) + i - 1], shared->p_ICU_P[shared->dim_p_ICU_P_12 * (k - 1) + shared->dim_p_ICU_P_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_IR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_IR_3; ++k) {
          internal.n_IR[i - 1 + shared->dim_n_IR_1 * (j - 1) + shared->dim_n_IR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I[shared->dim_I_12 * (k - 1) + shared->dim_I_1 * (j - 1) + i - 1], shared->p_IR);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_IR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_IR_3; ++k) {
          internal.n_IR[i - 1 + shared->dim_n_IR_1 * (j - 1) + shared->dim_n_IR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_I[shared->dim_n_I_12 * (k - 1) + shared->dim_n_I_1 * (j - 1) + i - 1], shared->p_hosp_icu_R[shared->dim_p_hosp_icu_R_12 * (k - 1) + shared->dim_p_hosp_icu_R_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_waning_1; ++i) {
      for (int j = 1; j <= shared->dim_n_waning_2; ++j) {
        internal.n_waning[i - 1 + shared->dim_n_waning_1 * (j - 1)] = (j != shared->n_vac ? dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1], shared->p_waning[shared->dim_p_waning_1 * (j - 1) + i - 1]) : (- odin_sum2<real_type>(internal.n_waning.data(), i - 1, i, 0, j - 1, shared->dim_n_waning_1)));
      }
    }
    for (int i = 1; i <= shared->dim_A_1; ++i) {
      for (int j = 1; j <= shared->dim_A_2; ++j) {
        for (int k = 1; k <= shared->dim_A_3; ++k) {
          state_next[shared->offset_variable_A + i - 1 + shared->dim_A_1 * (j - 1) + shared->dim_A_12 * (k - 1)] = A[shared->dim_A_12 * (k - 1) + shared->dim_A_1 * (j - 1) + i - 1] + internal.n_EaA[shared->dim_n_EaA_12 * (k - 1) + shared->dim_n_EaA_1 * (j - 1) + i - 1] - internal.n_AR[shared->dim_n_AR_12 * (k - 1) + shared->dim_n_AR_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_D_1; ++i) {
      for (int j = 1; j <= shared->dim_D_2; ++j) {
        for (int k = 1; k <= shared->dim_D_3; ++k) {
          state_next[shared->offset_variable_D + i - 1 + shared->dim_D_1 * (j - 1) + shared->dim_D_12 * (k - 1)] = D[shared->dim_D_12 * (k - 1) + shared->dim_D_1 * (j - 1) + i - 1] + internal.n_B_D_D[shared->dim_n_B_D_D_12 * (k - 1) + shared->dim_n_B_D_D_1 * (j - 1) + i - 1] + internal.n_B_H_D[shared->dim_n_B_H_D_12 * (k - 1) + shared->dim_n_B_H_D_1 * (j - 1) + i - 1] + internal.n_B_ICU_D[shared->dim_n_B_ICU_D_12 * (k - 1) + shared->dim_n_B_ICU_D_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_1; ++i) {
      for (int j = 1; j <= shared->dim_I_2; ++j) {
        for (int k = 1; k <= shared->dim_I_3; ++k) {
          state_next[shared->offset_variable_I + i - 1 + shared->dim_I_1 * (j - 1) + shared->dim_I_12 * (k - 1)] = I[shared->dim_I_12 * (k - 1) + shared->dim_I_1 * (j - 1) + i - 1] + internal.n_PI[shared->dim_n_PI_12 * (k - 1) + shared->dim_n_PI_1 * (j - 1) + i - 1] - internal.n_I[shared->dim_n_I_12 * (k - 1) + shared->dim_n_I_1 * (j - 1) + i - 1] + internal.N_imp[shared->dim_N_imp_12 * (k - 1) + shared->dim_N_imp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_P_1; ++i) {
      for (int j = 1; j <= shared->dim_P_2; ++j) {
        for (int k = 1; k <= shared->dim_P_3; ++k) {
          state_next[shared->offset_variable_P + i - 1 + shared->dim_P_1 * (j - 1) + shared->dim_P_12 * (k - 1)] = P[shared->dim_P_12 * (k - 1) + shared->dim_P_1 * (j - 1) + i - 1] + internal.n_EsI[shared->dim_n_EsI_12 * (k - 1) + shared->dim_n_EsI_1 * (j - 1) + i - 1] - internal.n_PI[shared->dim_n_PI_12 * (k - 1) + shared->dim_n_PI_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[5] = e_int + r * shared->dt;
    state_next[8] = odin_sum2<real_type>(internal.N.data(), 0, shared->dim_N_1, 0, shared->dim_N_2, shared->dim_N_1);
    for (int i = 1; i <= shared->dim_n_HD_1; ++i) {
      for (int j = 1; j <= shared->dim_n_HD_2; ++j) {
        for (int k = 1; k <= shared->dim_n_HD_3; ++k) {
          internal.n_HD[i - 1 + shared->dim_n_HD_1 * (j - 1) + shared->dim_n_HD_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_H[shared->dim_n_H_12 * (k - 1) + shared->dim_n_H_1 * (j - 1) + i - 1], shared->p_hosp_d[shared->dim_p_hosp_d_12 * (k - 1) + shared->dim_p_hosp_d_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_D_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_D_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ICU_D_3; ++k) {
          internal.n_ICU_D[i - 1 + shared->dim_n_ICU_D_1 * (j - 1) + shared->dim_n_ICU_D_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_ICU_P[shared->dim_n_ICU_P_12 * (k - 1) + shared->dim_n_ICU_P_1 * (j - 1) + i - 1], shared->p_icu_d[shared->dim_p_icu_d_12 * (k - 1) + shared->dim_p_icu_d_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_IH_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IH_2; ++j) {
        for (int k = 1; k <= shared->dim_n_IH_3; ++k) {
          internal.n_IH[i - 1 + shared->dim_n_IH_1 * (j - 1) + shared->dim_n_IH_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_I[shared->dim_n_I_12 * (k - 1) + shared->dim_n_I_1 * (j - 1) + i - 1] - internal.n_IR[shared->dim_n_IR_12 * (k - 1) + shared->dim_n_IR_1 * (j - 1) + i - 1], shared->p_hosp[shared->dim_p_hosp_12 * (k - 1) + shared->dim_p_hosp_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RI_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RI_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RI_3; ++k) {
          internal.n_RI[i - 1 + shared->dim_n_RI_1 * (j - 1) + shared->dim_n_RI_12 * (k - 1)] = (shared->n_strain == 1 ? 0 : ((k == 1 ? dust::random::binomial<real_type>(rng_state, R[shared->dim_R_12 * 0 + shared->dim_R_1 * (j - 1) + i - 1], 1 - std::exp(- odin_sum5<real_type>(internal.lambda_ij.data(), i - 1, i, j - 1, j, 0, shared->dim_lambda_ij_3, 0, shared->dim_lambda_ij_4, 0, 1, shared->dim_lambda_ij_1, shared->dim_lambda_ij_12, shared->dim_lambda_ij_123, shared->dim_lambda_ij_1234) * shared->cross_protection[shared->dim_cross_protection_1 * 1 + 0] * shared->symp_asymp_effect[shared->dim_symp_asymp_effect_12 * (k - 1) + shared->dim_symp_asymp_effect_1 * (j - 1) + i - 1] * shared->dt)) : ((k == 2 ? dust::random::binomial<real_type>(rng_state, R[shared->dim_R_12 * 1 + shared->dim_R_1 * (j - 1) + i - 1], 1 - std::exp(- odin_sum5<real_type>(internal.lambda_ij.data(), i - 1, i, j - 1, j, 0, shared->dim_lambda_ij_3, 0, shared->dim_lambda_ij_4, 0, 1, shared->dim_lambda_ij_1, shared->dim_lambda_ij_12, shared->dim_lambda_ij_123, shared->dim_lambda_ij_1234) * shared->cross_protection[shared->dim_cross_protection_1 * 0 + 1] * shared->symp_asymp_effect[shared->dim_symp_asymp_effect_12 * (k - 1) + shared->dim_symp_asymp_effect_1 * (j - 1) + i - 1] * shared->dt)) : 0)))));
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_SE_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SE_2; ++j) {
        for (int k = 1; k <= shared->dim_p_SE_3; ++k) {
          internal.p_SE[i - 1 + shared->dim_p_SE_1 * (j - 1) + shared->dim_p_SE_12 * (k - 1)] = 1 - std::exp(- odin_sum5<real_type>(internal.lambda_ij.data(), i - 1, i, j - 1, j, 0, shared->dim_lambda_ij_3, 0, shared->dim_lambda_ij_4, k - 1, k, shared->dim_lambda_ij_1, shared->dim_lambda_ij_12, shared->dim_lambda_ij_123, shared->dim_lambda_ij_1234) * shared->symp_asymp_effect[shared->dim_symp_asymp_effect_12 * (k - 1) + shared->dim_symp_asymp_effect_1 * (j - 1) + i - 1] * shared->dt);
        }
      }
    }
    for (int i = 1; i <= shared->dim_ICU_P_1; ++i) {
      for (int j = 1; j <= shared->dim_ICU_P_2; ++j) {
        for (int k = 1; k <= shared->dim_ICU_P_3; ++k) {
          state_next[shared->offset_variable_ICU_P + i - 1 + shared->dim_ICU_P_1 * (j - 1) + shared->dim_ICU_P_12 * (k - 1)] = ICU_P[shared->dim_ICU_P_12 * (k - 1) + shared->dim_ICU_P_1 * (j - 1) + i - 1] - internal.n_ICU_P[shared->dim_n_ICU_P_12 * (k - 1) + shared->dim_n_ICU_P_1 * (j - 1) + i - 1] + internal.n_ICU_RP[shared->dim_n_ICU_RP_12 * (k - 1) + shared->dim_n_ICU_RP_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_ICU_R_1; ++i) {
      for (int j = 1; j <= shared->dim_ICU_R_2; ++j) {
        for (int k = 1; k <= shared->dim_ICU_R_3; ++k) {
          state_next[shared->offset_variable_ICU_R + i - 1 + shared->dim_ICU_R_1 * (j - 1) + shared->dim_ICU_R_12 * (k - 1)] = ICU_R[shared->dim_ICU_R_12 * (k - 1) + shared->dim_ICU_R_1 * (j - 1) + i - 1] + internal.n_ICU_HR[shared->dim_n_ICU_HR_12 * (k - 1) + shared->dim_n_ICU_HR_1 * (j - 1) + i - 1] - internal.n_ICU_RP[shared->dim_n_ICU_RP_12 * (k - 1) + shared->dim_n_ICU_RP_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_tot_resp_1; ++i) {
      for (int j = 1; j <= shared->dim_tot_resp_2; ++j) {
        for (int k = 1; k <= shared->dim_tot_resp_3; ++k) {
          state_next[shared->offset_variable_tot_resp + i - 1 + shared->dim_tot_resp_1 * (j - 1) + shared->dim_tot_resp_12 * (k - 1)] = tot_resp[shared->dim_tot_resp_12 * (k - 1) + shared->dim_tot_resp_1 * (j - 1) + i - 1] + internal.n_ICU_HR[shared->dim_n_ICU_HR_12 * (k - 1) + shared->dim_n_ICU_HR_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_HR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_HR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_HR_3; ++k) {
          internal.n_HR[i - 1 + shared->dim_n_HR_1 * (j - 1) + shared->dim_n_HR_12 * (k - 1)] = internal.n_H[shared->dim_n_H_12 * (k - 1) + shared->dim_n_H_1 * (j - 1) + i - 1] - internal.n_HD[shared->dim_n_HD_12 * (k - 1) + shared->dim_n_HD_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_R_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ICU_R_3; ++k) {
          internal.n_ICU_R[i - 1 + shared->dim_n_ICU_R_1 * (j - 1) + shared->dim_n_ICU_R_12 * (k - 1)] = internal.n_ICU_P[shared->dim_n_ICU_P_12 * (k - 1) + shared->dim_n_ICU_P_1 * (j - 1) + i - 1] - internal.n_ICU_D[shared->dim_n_ICU_D_12 * (k - 1) + shared->dim_n_ICU_D_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_IICU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IICU_2; ++j) {
        for (int k = 1; k <= shared->dim_n_IICU_3; ++k) {
          internal.n_IICU[i - 1 + shared->dim_n_IICU_1 * (j - 1) + shared->dim_n_IICU_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_I[shared->dim_n_I_12 * (k - 1) + shared->dim_n_I_1 * (j - 1) + i - 1] - internal.n_IR[shared->dim_n_IR_12 * (k - 1) + shared->dim_n_IR_1 * (j - 1) + i - 1] - internal.n_IH[shared->dim_n_IH_12 * (k - 1) + shared->dim_n_IH_1 * (j - 1) + i - 1], shared->p_icu[shared->dim_p_icu_12 * (k - 1) + shared->dim_p_icu_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RI_op_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RI_op_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RI_op_3; ++k) {
          internal.n_RI_op[i - 1 + shared->dim_n_RI_op_1 * (j - 1) + shared->dim_n_RI_op_12 * (k - 1)] = (shared->n_strain == 1 ? 0 : ((k == 1 ? internal.n_RI[shared->dim_n_RI_12 * 1 + shared->dim_n_RI_1 * (j - 1) + i - 1] : internal.n_RI[shared->dim_n_RI_12 * 0 + shared->dim_n_RI_1 * (j - 1) + i - 1])));
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SE_tot_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SE_tot_2; ++j) {
        internal.n_SE_tot[i - 1 + shared->dim_n_SE_tot_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1], odin_sum3<real_type>(internal.p_SE.data(), i - 1, i, j - 1, j, 0, shared->dim_p_SE_3, shared->dim_p_SE_1, shared->dim_p_SE_12));
      }
    }
    for (int i = 1; i <= shared->dim_rel_strain_1; ++i) {
      for (int j = 1; j <= shared->dim_rel_strain_2; ++j) {
        for (int k = 1; k <= shared->dim_rel_strain_3; ++k) {
          internal.rel_strain[i - 1 + shared->dim_rel_strain_1 * (j - 1) + shared->dim_rel_strain_12 * (k - 1)] = internal.p_SE[shared->dim_p_SE_12 * (k - 1) + shared->dim_p_SE_1 * (j - 1) + i - 1] / (real_type) odin_sum3<real_type>(internal.p_SE.data(), i - 1, i, j - 1, j, 0, shared->dim_p_SE_3, shared->dim_p_SE_1, shared->dim_p_SE_12);
        }
      }
    }
    for (int i = 1; i <= shared->dim_B_D_H_1; ++i) {
      for (int j = 1; j <= shared->dim_B_D_H_2; ++j) {
        for (int k = 1; k <= shared->dim_B_D_H_3; ++k) {
          state_next[shared->offset_variable_B_D_H + i - 1 + shared->dim_B_D_H_1 * (j - 1) + shared->dim_B_D_H_12 * (k - 1)] = B_D_H[shared->dim_B_D_H_12 * (k - 1) + shared->dim_B_D_H_1 * (j - 1) + i - 1] + internal.n_HD[shared->dim_n_HD_12 * (k - 1) + shared->dim_n_HD_1 * (j - 1) + i - 1] - internal.n_B_H_D[shared->dim_n_B_H_D_12 * (k - 1) + shared->dim_n_B_H_D_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_B_D_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_B_D_ICU_2; ++j) {
        for (int k = 1; k <= shared->dim_B_D_ICU_3; ++k) {
          state_next[shared->offset_variable_B_D_ICU + i - 1 + shared->dim_B_D_ICU_1 * (j - 1) + shared->dim_B_D_ICU_12 * (k - 1)] = B_D_ICU[shared->dim_B_D_ICU_12 * (k - 1) + shared->dim_B_D_ICU_1 * (j - 1) + i - 1] + internal.n_ICU_D[shared->dim_n_ICU_D_12 * (k - 1) + shared->dim_n_ICU_D_1 * (j - 1) + i - 1] - internal.n_B_ICU_D[shared->dim_n_B_ICU_D_12 * (k - 1) + shared->dim_n_B_ICU_D_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_H_1; ++i) {
      for (int j = 1; j <= shared->dim_H_2; ++j) {
        for (int k = 1; k <= shared->dim_H_3; ++k) {
          state_next[shared->offset_variable_H + i - 1 + shared->dim_H_1 * (j - 1) + shared->dim_H_12 * (k - 1)] = H[shared->dim_H_12 * (k - 1) + shared->dim_H_1 * (j - 1) + i - 1] + internal.n_IH[shared->dim_n_IH_12 * (k - 1) + shared->dim_n_IH_1 * (j - 1) + i - 1] - internal.n_H[shared->dim_n_H_12 * (k - 1) + shared->dim_n_H_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_ID_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ID_2; ++j) {
        for (int k = 1; k <= shared->dim_n_ID_3; ++k) {
          internal.n_ID[i - 1 + shared->dim_n_ID_1 * (j - 1) + shared->dim_n_ID_12 * (k - 1)] = internal.n_I[shared->dim_n_I_12 * (k - 1) + shared->dim_n_I_1 * (j - 1) + i - 1] - internal.n_IR[shared->dim_n_IR_12 * (k - 1) + shared->dim_n_IR_1 * (j - 1) + i - 1] - internal.n_IH[shared->dim_n_IH_12 * (k - 1) + shared->dim_n_IH_1 * (j - 1) + i - 1] - internal.n_IICU[shared->dim_n_IICU_12 * (k - 1) + shared->dim_n_IICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RIA_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RIA_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RIA_3; ++k) {
          internal.n_RIA[i - 1 + shared->dim_n_RIA_1 * (j - 1) + shared->dim_n_RIA_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_RI_op[shared->dim_n_RI_op_12 * (k - 1) + shared->dim_n_RI_op_1 * (j - 1) + i - 1], shared->pa[shared->dim_pa_12 * (k - 1) + shared->dim_pa_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SE_2; ++j) {
        for (int k = 1; k <= shared->dim_n_SE_3; ++k) {
          internal.n_SE[i - 1 + shared->dim_n_SE_1 * (j - 1) + shared->dim_n_SE_12 * (k - 1)] = (k == 1 || shared->n_strain == 1 ? dust::random::binomial<real_type>(rng_state, internal.n_SE_tot[shared->dim_n_SE_tot_1 * (j - 1) + i - 1], internal.rel_strain[shared->dim_rel_strain_12 * (k - 1) + shared->dim_rel_strain_1 * (j - 1) + i - 1]) : ((k == 2 ? internal.n_SE_tot[shared->dim_n_SE_tot_1 * (j - 1) + i - 1] - internal.n_SE[shared->dim_n_SE_12 * 0 + shared->dim_n_SE_1 * (j - 1) + i - 1] : 0)));
        }
      }
    }
    real_type new_tot_in_hosp = odin_sum3<real_type>(H, 0, shared->dim_H_1, 0, shared->dim_H_2, 0, shared->dim_H_3, shared->dim_H_1, shared->dim_H_12) + odin_sum3<real_type>(ICU_H, 0, shared->dim_ICU_H_1, 0, shared->dim_ICU_H_2, 0, shared->dim_ICU_H_3, shared->dim_ICU_H_1, shared->dim_ICU_H_12) + odin_sum3<real_type>(ICU_R, 0, shared->dim_ICU_R_1, 0, shared->dim_ICU_R_2, 0, shared->dim_ICU_R_3, shared->dim_ICU_R_1, shared->dim_ICU_R_12) + odin_sum3<real_type>(ICU_P, 0, shared->dim_ICU_P_1, 0, shared->dim_ICU_P_2, 0, shared->dim_ICU_P_3, shared->dim_ICU_P_1, shared->dim_ICU_P_12) + odin_sum3<real_type>(internal.n_IH.data(), 0, shared->dim_n_IH_1, 0, shared->dim_n_IH_2, 0, shared->dim_n_IH_3, shared->dim_n_IH_1, shared->dim_n_IH_12) - odin_sum3<real_type>(internal.n_H.data(), 0, shared->dim_n_H_1, 0, shared->dim_n_H_2, 0, shared->dim_n_H_3, shared->dim_n_H_1, shared->dim_n_H_12) + odin_sum3<real_type>(internal.n_IICU.data(), 0, shared->dim_n_IICU_1, 0, shared->dim_n_IICU_2, 0, shared->dim_n_IICU_3, shared->dim_n_IICU_1, shared->dim_n_IICU_12) - odin_sum3<real_type>(internal.n_ICU_P.data(), 0, shared->dim_n_ICU_P_1, 0, shared->dim_n_ICU_P_2, 0, shared->dim_n_ICU_P_3, shared->dim_n_ICU_P_1, shared->dim_n_ICU_P_12);
    for (int i = 1; i <= shared->dim_ICU_H_1; ++i) {
      for (int j = 1; j <= shared->dim_ICU_H_2; ++j) {
        for (int k = 1; k <= shared->dim_ICU_H_3; ++k) {
          state_next[shared->offset_variable_ICU_H + i - 1 + shared->dim_ICU_H_1 * (j - 1) + shared->dim_ICU_H_12 * (k - 1)] = ICU_H[shared->dim_ICU_H_12 * (k - 1) + shared->dim_ICU_H_1 * (j - 1) + i - 1] + internal.n_IICU[shared->dim_n_IICU_12 * (k - 1) + shared->dim_n_IICU_1 * (j - 1) + i - 1] - internal.n_ICU_HR[shared->dim_n_ICU_HR_12 * (k - 1) + shared->dim_n_ICU_HR_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_R_1; ++i) {
      for (int j = 1; j <= shared->dim_R_2; ++j) {
        for (int k = 1; k <= shared->dim_R_3; ++k) {
          state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1) + shared->dim_R_12 * (k - 1)] = R[shared->dim_R_12 * (k - 1) + shared->dim_R_1 * (j - 1) + i - 1] + internal.n_AR[shared->dim_n_AR_12 * (k - 1) + shared->dim_n_AR_1 * (j - 1) + i - 1] + internal.n_IR[shared->dim_n_IR_12 * (k - 1) + shared->dim_n_IR_1 * (j - 1) + i - 1] + internal.n_ICU_R[shared->dim_n_ICU_R_12 * (k - 1) + shared->dim_n_ICU_R_1 * (j - 1) + i - 1] + internal.n_HR[shared->dim_n_HR_12 * (k - 1) + shared->dim_n_HR_1 * (j - 1) + i - 1] - internal.n_RS[shared->dim_n_RS_12 * (k - 1) + shared->dim_n_RS_1 * (j - 1) + i - 1] - internal.n_RI[shared->dim_n_RI_12 * (k - 1) + shared->dim_n_RI_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_hosp_inc; ++i) {
      state_next[9 + i - 1] = (fmodr<real_type>(time, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_IH.data(), i - 1, i, 0, shared->dim_n_IH_2, 0, shared->dim_n_IH_3, shared->dim_n_IH_1, shared->dim_n_IH_12) + odin_sum3<real_type>(internal.n_IICU.data(), i - 1, i, 0, shared->dim_n_IICU_2, 0, shared->dim_n_IICU_3, shared->dim_n_IICU_1, shared->dim_n_IICU_12) : hosp_inc[i - 1] + odin_sum3<real_type>(internal.n_IH.data(), i - 1, i, 0, shared->dim_n_IH_2, 0, shared->dim_n_IH_3, shared->dim_n_IH_1, shared->dim_n_IH_12) + odin_sum3<real_type>(internal.n_IICU.data(), i - 1, i, 0, shared->dim_n_IICU_2, 0, shared->dim_n_IICU_3, shared->dim_n_IICU_1, shared->dim_n_IICU_12));
    }
    for (int i = 1; i <= shared->dim_tot_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_tot_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_tot_hosp_3; ++k) {
          state_next[shared->offset_variable_tot_hosp + i - 1 + shared->dim_tot_hosp_1 * (j - 1) + shared->dim_tot_hosp_12 * (k - 1)] = tot_hosp[shared->dim_tot_hosp_12 * (k - 1) + shared->dim_tot_hosp_1 * (j - 1) + i - 1] + internal.n_IH[shared->dim_n_IH_12 * (k - 1) + shared->dim_n_IH_1 * (j - 1) + i - 1] + internal.n_IICU[shared->dim_n_IICU_12 * (k - 1) + shared->dim_n_IICU_1 * (j - 1) + i - 1];
        }
      }
    }
    real_type dr_dt = (current_tot_in_hosp - new_tot_in_hosp) / (real_type) shared->dt;
    for (int i = 1; i <= shared->dim_n_RIS_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RIS_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RIS_3; ++k) {
          internal.n_RIS[i - 1 + shared->dim_n_RIS_1 * (j - 1) + shared->dim_n_RIS_12 * (k - 1)] = internal.n_RI_op[shared->dim_n_RI_op_12 * (k - 1) + shared->dim_n_RI_op_1 * (j - 1) + i - 1] - internal.n_RIA[shared->dim_n_RIA_12 * (k - 1) + shared->dim_n_RIA_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SEa_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SEa_2; ++j) {
        for (int k = 1; k <= shared->dim_n_SEa_3; ++k) {
          internal.n_SEa[i - 1 + shared->dim_n_SEa_1 * (j - 1) + shared->dim_n_SEa_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1], shared->pa[shared->dim_pa_12 * (k - 1) + shared->dim_pa_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_B_D_1; ++i) {
      for (int j = 1; j <= shared->dim_B_D_2; ++j) {
        for (int k = 1; k <= shared->dim_B_D_3; ++k) {
          state_next[shared->offset_variable_B_D + i - 1 + shared->dim_B_D_1 * (j - 1) + shared->dim_B_D_12 * (k - 1)] = B_D[shared->dim_B_D_12 * (k - 1) + shared->dim_B_D_1 * (j - 1) + i - 1] + internal.n_ID[shared->dim_n_ID_12 * (k - 1) + shared->dim_n_ID_1 * (j - 1) + i - 1] - internal.n_B_D_D[shared->dim_n_B_D_D_12 * (k - 1) + shared->dim_n_B_D_D_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_S_1; ++i) {
      for (int j = 1; j <= shared->dim_S_2; ++j) {
        state_next[shared->offset_variable_S + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] - odin_sum3<real_type>(internal.n_SE.data(), i - 1, i, j - 1, j, 0, shared->dim_n_SE_3, shared->dim_n_SE_1, shared->dim_n_SE_12) + internal.vax_time_step[shared->dim_vax_time_step_1 * (j - 1) + i - 1] - internal.n_waning[shared->dim_n_waning_1 * (j - 1) + i - 1] + odin_sum3<real_type>(internal.n_RS.data(), i - 1, i, j - 1, j, 0, shared->dim_n_RS_3, shared->dim_n_RS_1, shared->dim_n_RS_12) - odin_sum3<real_type>(internal.N_imp.data(), i - 1, i, j - 1, j, 0, shared->dim_N_imp_3, shared->dim_N_imp_1, shared->dim_N_imp_12);
      }
    }
    state_next[3] = odin_sum3<real_type>(internal.n_SE.data(), 0, shared->dim_n_SE_1, 0, shared->dim_n_SE_2, 0, shared->dim_n_SE_3, shared->dim_n_SE_1, shared->dim_n_SE_12);
    state_next[4] = (time > 20 && current_infected > shared->beta_cut_peak_param[2] && odin_sum3<real_type>(internal.n_SE.data(), 0, shared->dim_n_SE_1, 0, shared->dim_n_SE_2, 0, shared->dim_n_SE_3, shared->dim_n_SE_1, shared->dim_n_SE_12) < incidence_int ? 1 : peak_trigger);
    for (int i = 1; i <= shared->dim_tot_infected_1; ++i) {
      for (int j = 1; j <= shared->dim_tot_infected_2; ++j) {
        for (int k = 1; k <= shared->dim_tot_infected_3; ++k) {
          state_next[shared->offset_variable_tot_infected + i - 1 + shared->dim_tot_infected_1 * (j - 1) + shared->dim_tot_infected_12 * (k - 1)] = tot_infected[shared->dim_tot_infected_12 * (k - 1) + shared->dim_tot_infected_1 * (j - 1) + i - 1] + internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SEi_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SEi_2; ++j) {
        for (int k = 1; k <= shared->dim_n_SEi_3; ++k) {
          internal.n_SEi[i - 1 + shared->dim_n_SEi_1 * (j - 1) + shared->dim_n_SEi_12 * (k - 1)] = internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1] - internal.n_SEa[shared->dim_n_SEa_12 * (k - 1) + shared->dim_n_SEa_1 * (j - 1) + i - 1];
        }
      }
    }
    real_type new_beta_thresh = (trigger == 1 ? shared->change_factor[0] + 1 / (real_type) shared->threshold[0] * (shared->change_factor[1] * r + shared->change_factor[2] * e_int + shared->change_factor[3] * (dr_dt)) : beta_thresh);
    for (int i = 1; i <= shared->dim_Ea_1; ++i) {
      for (int j = 1; j <= shared->dim_Ea_2; ++j) {
        for (int k = 1; k <= shared->dim_Ea_3; ++k) {
          state_next[shared->offset_variable_Ea + i - 1 + shared->dim_Ea_1 * (j - 1) + shared->dim_Ea_12 * (k - 1)] = Ea[shared->dim_Ea_12 * (k - 1) + shared->dim_Ea_1 * (j - 1) + i - 1] + internal.n_SEa[shared->dim_n_SEa_12 * (k - 1) + shared->dim_n_SEa_1 * (j - 1) + i - 1] - internal.n_EaA[shared->dim_n_EaA_12 * (k - 1) + shared->dim_n_EaA_1 * (j - 1) + i - 1] + internal.n_RIA[shared->dim_n_RIA_12 * (k - 1) + shared->dim_n_RIA_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_Es_1; ++i) {
      for (int j = 1; j <= shared->dim_Es_2; ++j) {
        for (int k = 1; k <= shared->dim_Es_3; ++k) {
          state_next[shared->offset_variable_Es + i - 1 + shared->dim_Es_1 * (j - 1) + shared->dim_Es_12 * (k - 1)] = Es[shared->dim_Es_12 * (k - 1) + shared->dim_Es_1 * (j - 1) + i - 1] + internal.n_SEi[shared->dim_n_SEi_12 * (k - 1) + shared->dim_n_SEi_1 * (j - 1) + i - 1] - internal.n_EsI[shared->dim_n_EsI_12 * (k - 1) + shared->dim_n_EsI_1 * (j - 1) + i - 1] + internal.n_RIS[shared->dim_n_RIS_12 * (k - 1) + shared->dim_n_RIS_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[7] = (new_beta_thresh > shared->threshold_max ? shared->threshold_max : ((new_beta_thresh < shared->threshold_min ? shared->threshold_min : new_beta_thresh)));
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_type tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum4(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int dim_x_1, int dim_x_12, int dim_x_123) {
  real_type tot = 0.0;
  for (int l = from_l; l < to_l; ++l) {
    int ll = l * dim_x_123;
    for (int k = from_k; k < to_k; ++k) {
      int kk = k * dim_x_12 + ll;
      for (int j = from_j; j < to_j; ++j) {
        int jj = j * dim_x_1 + kk;
        for (int i = from_i; i < to_i; ++i) {
          tot += x[i + jj];
        }
      }
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum5(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int from_i5, int to_i5, int dim_x_1, int dim_x_12, int dim_x_123, int dim_x_1234) {
  real_type tot = 0.0;
  for (int i5 = from_i5; i5 < to_i5; ++i5) {
    int i5i5 = i5 * dim_x_1234;
    for (int l = from_l; l < to_l; ++l) {
      int ll = l * dim_x_123 + i5i5;
      for (int k = from_k; k < to_k; ++k) {
        int kk = k * dim_x_12 + ll;
        for (int j = from_j; j < to_j; ++j) {
          int jj = j * dim_x_1 + kk;
          for (int i = from_i; i < to_i; ++i) {
            tot += x[i + jj];
          }
        }
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<model> dust_pars<model>(cpp11::list user) {
  typedef typename model::real_type real_type;
  auto shared = std::make_shared<model::shared_type>();
  model::internal_type internal;
  shared->dim_beta_cut_peak_param = 3;
  shared->dim_change_factor = 4;
  shared->dim_dyn_change = 4;
  shared->dim_threshold = 2;
  shared->initial_e_int = 0;
  shared->initial_incidence_int = 0;
  shared->initial_log_beta = 0;
  shared->initial_peak_trigger = 0;
  shared->initial_time = 0;
  shared->initial_tot_N = 0;
  shared->initial_trigger = 0;
  shared->N_steps = NA_INTEGER;
  shared->asympt_infect = NA_REAL;
  shared->infectious_period = NA_REAL;
  shared->latent_period = NA_REAL;
  shared->n_strain = NA_INTEGER;
  shared->n_vac = NA_INTEGER;
  shared->pre_sympt_infect = NA_REAL;
  shared->pre_sympt_period = NA_REAL;
  shared->rand_beta = NA_REAL;
  shared->time_before_death = NA_REAL;
  shared->time_before_death_hosp = NA_REAL;
  shared->time_before_death_icu = NA_REAL;
  shared->waning_inf = NA_REAL;
  shared->beta_cut_peak = 0;
  shared->beta_dynamic_change = 0;
  shared->dt = 1;
  shared->n = 198;
  shared->rand_beta_sd = 0.10000000000000001;
  shared->threshold_beta = 0;
  shared->threshold_ini = 0.10000000000000001;
  shared->threshold_max = 0.20000000000000001;
  shared->threshold_min = 0.050000000000000003;
  shared->waning_immunity = 10000;
  shared->N_steps = user_get_scalar<int>(user, "N_steps", shared->N_steps, NA_REAL, NA_REAL);
  shared->asympt_infect = user_get_scalar<real_type>(user, "asympt_infect", shared->asympt_infect, NA_REAL, NA_REAL);
  shared->beta_cut_peak = user_get_scalar<real_type>(user, "beta_cut_peak", shared->beta_cut_peak, NA_REAL, NA_REAL);
  shared->beta_dynamic_change = user_get_scalar<real_type>(user, "beta_dynamic_change", shared->beta_dynamic_change, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->infectious_period = user_get_scalar<real_type>(user, "infectious_period", shared->infectious_period, NA_REAL, NA_REAL);
  shared->latent_period = user_get_scalar<real_type>(user, "latent_period", shared->latent_period, NA_REAL, NA_REAL);
  shared->n = user_get_scalar<int>(user, "n", shared->n, NA_REAL, NA_REAL);
  shared->n_strain = user_get_scalar<int>(user, "n_strain", shared->n_strain, NA_REAL, NA_REAL);
  shared->n_vac = user_get_scalar<int>(user, "n_vac", shared->n_vac, NA_REAL, NA_REAL);
  shared->pre_sympt_infect = user_get_scalar<real_type>(user, "pre_sympt_infect", shared->pre_sympt_infect, NA_REAL, NA_REAL);
  shared->pre_sympt_period = user_get_scalar<real_type>(user, "pre_sympt_period", shared->pre_sympt_period, NA_REAL, NA_REAL);
  shared->rand_beta = user_get_scalar<real_type>(user, "rand_beta", shared->rand_beta, NA_REAL, NA_REAL);
  shared->rand_beta_sd = user_get_scalar<real_type>(user, "rand_beta_sd", shared->rand_beta_sd, NA_REAL, NA_REAL);
  shared->threshold_beta = user_get_scalar<real_type>(user, "threshold_beta", shared->threshold_beta, NA_REAL, NA_REAL);
  shared->threshold_ini = user_get_scalar<real_type>(user, "threshold_ini", shared->threshold_ini, NA_REAL, NA_REAL);
  shared->threshold_max = user_get_scalar<real_type>(user, "threshold_max", shared->threshold_max, NA_REAL, NA_REAL);
  shared->threshold_min = user_get_scalar<real_type>(user, "threshold_min", shared->threshold_min, NA_REAL, NA_REAL);
  shared->time_before_death = user_get_scalar<real_type>(user, "time_before_death", shared->time_before_death, NA_REAL, NA_REAL);
  shared->time_before_death_hosp = user_get_scalar<real_type>(user, "time_before_death_hosp", shared->time_before_death_hosp, NA_REAL, NA_REAL);
  shared->time_before_death_icu = user_get_scalar<real_type>(user, "time_before_death_icu", shared->time_before_death_icu, NA_REAL, NA_REAL);
  shared->waning_immunity = user_get_scalar<real_type>(user, "waning_immunity", shared->waning_immunity, NA_REAL, NA_REAL);
  shared->waning_inf = user_get_scalar<real_type>(user, "waning_inf", shared->waning_inf, NA_REAL, NA_REAL);
  shared->beta_cut_peak_param = user_get_array_fixed<real_type, 1>(user, "beta_cut_peak_param", shared->beta_cut_peak_param, {shared->dim_beta_cut_peak_param}, NA_REAL, NA_REAL);
  shared->change_factor = user_get_array_fixed<real_type, 1>(user, "change_factor", shared->change_factor, {shared->dim_change_factor}, NA_REAL, NA_REAL);
  shared->dim_A_1 = shared->n;
  shared->dim_A_2 = shared->n_vac;
  shared->dim_A_3 = shared->n_strain;
  shared->dim_A_ini_1 = shared->n;
  shared->dim_A_ini_2 = shared->n_vac;
  shared->dim_A_ini_3 = shared->n_strain;
  shared->dim_B_D_1 = shared->n;
  shared->dim_B_D_2 = shared->n_vac;
  shared->dim_B_D_3 = shared->n_strain;
  shared->dim_B_D_H_1 = shared->n;
  shared->dim_B_D_H_2 = shared->n_vac;
  shared->dim_B_D_H_3 = shared->n_strain;
  shared->dim_B_D_H_ini_1 = shared->n;
  shared->dim_B_D_H_ini_2 = shared->n_vac;
  shared->dim_B_D_H_ini_3 = shared->n_strain;
  shared->dim_B_D_ICU_1 = shared->n;
  shared->dim_B_D_ICU_2 = shared->n_vac;
  shared->dim_B_D_ICU_3 = shared->n_strain;
  shared->dim_B_D_ICU_ini_1 = shared->n;
  shared->dim_B_D_ICU_ini_2 = shared->n_vac;
  shared->dim_B_D_ICU_ini_3 = shared->n_strain;
  shared->dim_B_D_ini_1 = shared->n;
  shared->dim_B_D_ini_2 = shared->n_vac;
  shared->dim_B_D_ini_3 = shared->n_strain;
  shared->dim_D_1 = shared->n;
  shared->dim_D_2 = shared->n_vac;
  shared->dim_D_3 = shared->n_strain;
  shared->dim_D_ini_1 = shared->n;
  shared->dim_D_ini_2 = shared->n_vac;
  shared->dim_D_ini_3 = shared->n_strain;
  shared->dim_Ea_1 = shared->n;
  shared->dim_Ea_2 = shared->n_vac;
  shared->dim_Ea_3 = shared->n_strain;
  shared->dim_Ea_ini_1 = shared->n;
  shared->dim_Ea_ini_2 = shared->n_vac;
  shared->dim_Ea_ini_3 = shared->n_strain;
  shared->dim_Es_1 = shared->n;
  shared->dim_Es_2 = shared->n_vac;
  shared->dim_Es_3 = shared->n_strain;
  shared->dim_Es_ini_1 = shared->n;
  shared->dim_Es_ini_2 = shared->n_vac;
  shared->dim_Es_ini_3 = shared->n_strain;
  shared->dim_H_1 = shared->n;
  shared->dim_H_2 = shared->n_vac;
  shared->dim_H_3 = shared->n_strain;
  shared->dim_H_ini_1 = shared->n;
  shared->dim_H_ini_2 = shared->n_vac;
  shared->dim_H_ini_3 = shared->n_strain;
  shared->dim_ICU_H_1 = shared->n;
  shared->dim_ICU_H_2 = shared->n_vac;
  shared->dim_ICU_H_3 = shared->n_strain;
  shared->dim_ICU_H_ini_1 = shared->n;
  shared->dim_ICU_H_ini_2 = shared->n_vac;
  shared->dim_ICU_H_ini_3 = shared->n_strain;
  shared->dim_ICU_P_1 = shared->n;
  shared->dim_ICU_P_2 = shared->n_vac;
  shared->dim_ICU_P_3 = shared->n_strain;
  shared->dim_ICU_P_ini_1 = shared->n;
  shared->dim_ICU_P_ini_2 = shared->n_vac;
  shared->dim_ICU_P_ini_3 = shared->n_strain;
  shared->dim_ICU_R_1 = shared->n;
  shared->dim_ICU_R_2 = shared->n_vac;
  shared->dim_ICU_R_3 = shared->n_strain;
  shared->dim_ICU_R_ini_1 = shared->n;
  shared->dim_ICU_R_ini_2 = shared->n_vac;
  shared->dim_ICU_R_ini_3 = shared->n_strain;
  shared->dim_I_1 = shared->n;
  shared->dim_I_2 = shared->n_vac;
  shared->dim_I_3 = shared->n_strain;
  shared->dim_I_imp_ini_1 = shared->n;
  shared->dim_I_imp_ini_2 = shared->n_vac;
  shared->dim_I_imp_ini_3 = shared->n_strain;
  shared->dim_I_ini_1 = shared->n;
  shared->dim_I_ini_2 = shared->n_vac;
  shared->dim_I_ini_3 = shared->n_strain;
  shared->dim_N_1 = shared->n;
  shared->dim_N_2 = shared->n_vac;
  shared->dim_N_imp_1 = shared->n;
  shared->dim_N_imp_2 = shared->n_vac;
  shared->dim_N_imp_3 = shared->n_strain;
  shared->dim_P_1 = shared->n;
  shared->dim_P_2 = shared->n_vac;
  shared->dim_P_3 = shared->n_strain;
  shared->dim_P_ini_1 = shared->n;
  shared->dim_P_ini_2 = shared->n_vac;
  shared->dim_P_ini_3 = shared->n_strain;
  shared->dim_R_1 = shared->n;
  shared->dim_R_2 = shared->n_vac;
  shared->dim_R_3 = shared->n_strain;
  shared->dim_R_ini_1 = shared->n;
  shared->dim_R_ini_2 = shared->n_vac;
  shared->dim_R_ini_3 = shared->n_strain;
  shared->dim_S_1 = shared->n;
  shared->dim_S_2 = shared->n_vac;
  shared->dim_S_ini_1 = shared->n;
  shared->dim_S_ini_2 = shared->n_vac;
  shared->dim_T_waning_1 = shared->n;
  shared->dim_T_waning_2 = shared->n_vac;
  shared->dim_asympt_frac_1 = shared->n;
  shared->dim_asympt_frac_2 = shared->n_vac;
  shared->dim_asympt_frac_3 = shared->n_strain;
  shared->dim_beta = shared->n;
  shared->dim_beta_day_1 = shared->N_steps;
  shared->dim_beta_day_2 = shared->n;
  shared->dim_beta_norm = shared->n;
  shared->dim_beta_strain = shared->n_strain;
  shared->dim_cross_protection_1 = shared->n_strain;
  shared->dim_cross_protection_2 = shared->n_strain;
  shared->dim_hosp_inc = shared->n;
  shared->dim_hosp_prob_1 = shared->n;
  shared->dim_hosp_prob_2 = shared->n_vac;
  shared->dim_hosp_prob_3 = shared->n_strain;
  shared->dim_icu_prob_1 = shared->n;
  shared->dim_icu_prob_2 = shared->n_vac;
  shared->dim_icu_prob_3 = shared->n_strain;
  shared->dim_import_vec_1 = shared->N_steps;
  shared->dim_import_vec_2 = shared->n;
  shared->dim_import_vec_3 = shared->n_vac;
  shared->dim_import_vec_4 = shared->n_strain;
  shared->dim_lambda_ij_1 = shared->n;
  shared->dim_lambda_ij_2 = shared->n_vac;
  shared->dim_lambda_ij_3 = shared->n;
  shared->dim_lambda_ij_4 = shared->n_vac;
  shared->dim_lambda_ij_5 = shared->n_strain;
  shared->dim_length_hosp_1 = shared->n;
  shared->dim_length_hosp_2 = shared->n_vac;
  shared->dim_length_hosp_3 = shared->n_strain;
  shared->dim_length_icu_1 = shared->n;
  shared->dim_length_icu_2 = shared->n_vac;
  shared->dim_length_icu_3 = shared->n_strain;
  shared->dim_mixing_matrix_1 = shared->n;
  shared->dim_mixing_matrix_2 = shared->n;
  shared->dim_n_AR_1 = shared->n;
  shared->dim_n_AR_2 = shared->n_vac;
  shared->dim_n_AR_3 = shared->n_strain;
  shared->dim_n_B_D_D_1 = shared->n;
  shared->dim_n_B_D_D_2 = shared->n_vac;
  shared->dim_n_B_D_D_3 = shared->n_strain;
  shared->dim_n_B_H_D_1 = shared->n;
  shared->dim_n_B_H_D_2 = shared->n_vac;
  shared->dim_n_B_H_D_3 = shared->n_strain;
  shared->dim_n_B_ICU_D_1 = shared->n;
  shared->dim_n_B_ICU_D_2 = shared->n_vac;
  shared->dim_n_B_ICU_D_3 = shared->n_strain;
  shared->dim_n_EaA_1 = shared->n;
  shared->dim_n_EaA_2 = shared->n_vac;
  shared->dim_n_EaA_3 = shared->n_strain;
  shared->dim_n_EsI_1 = shared->n;
  shared->dim_n_EsI_2 = shared->n_vac;
  shared->dim_n_EsI_3 = shared->n_strain;
  shared->dim_n_HD_1 = shared->n;
  shared->dim_n_HD_2 = shared->n_vac;
  shared->dim_n_HD_3 = shared->n_strain;
  shared->dim_n_HR_1 = shared->n;
  shared->dim_n_HR_2 = shared->n_vac;
  shared->dim_n_HR_3 = shared->n_strain;
  shared->dim_n_H_1 = shared->n;
  shared->dim_n_H_2 = shared->n_vac;
  shared->dim_n_H_3 = shared->n_strain;
  shared->dim_n_ICU_D_1 = shared->n;
  shared->dim_n_ICU_D_2 = shared->n_vac;
  shared->dim_n_ICU_D_3 = shared->n_strain;
  shared->dim_n_ICU_HR_1 = shared->n;
  shared->dim_n_ICU_HR_2 = shared->n_vac;
  shared->dim_n_ICU_HR_3 = shared->n_strain;
  shared->dim_n_ICU_P_1 = shared->n;
  shared->dim_n_ICU_P_2 = shared->n_vac;
  shared->dim_n_ICU_P_3 = shared->n_strain;
  shared->dim_n_ICU_RP_1 = shared->n;
  shared->dim_n_ICU_RP_2 = shared->n_vac;
  shared->dim_n_ICU_RP_3 = shared->n_strain;
  shared->dim_n_ICU_R_1 = shared->n;
  shared->dim_n_ICU_R_2 = shared->n_vac;
  shared->dim_n_ICU_R_3 = shared->n_strain;
  shared->dim_n_ID_1 = shared->n;
  shared->dim_n_ID_2 = shared->n_vac;
  shared->dim_n_ID_3 = shared->n_strain;
  shared->dim_n_IH_1 = shared->n;
  shared->dim_n_IH_2 = shared->n_vac;
  shared->dim_n_IH_3 = shared->n_strain;
  shared->dim_n_IICU_1 = shared->n;
  shared->dim_n_IICU_2 = shared->n_vac;
  shared->dim_n_IICU_3 = shared->n_strain;
  shared->dim_n_IR_1 = shared->n;
  shared->dim_n_IR_2 = shared->n_vac;
  shared->dim_n_IR_3 = shared->n_strain;
  shared->dim_n_I_1 = shared->n;
  shared->dim_n_I_2 = shared->n_vac;
  shared->dim_n_I_3 = shared->n_strain;
  shared->dim_n_PI_1 = shared->n;
  shared->dim_n_PI_2 = shared->n_vac;
  shared->dim_n_PI_3 = shared->n_strain;
  shared->dim_n_RIA_1 = shared->n;
  shared->dim_n_RIA_2 = shared->n_vac;
  shared->dim_n_RIA_3 = shared->n_strain;
  shared->dim_n_RIS_1 = shared->n;
  shared->dim_n_RIS_2 = shared->n_vac;
  shared->dim_n_RIS_3 = shared->n_strain;
  shared->dim_n_RI_1 = shared->n;
  shared->dim_n_RI_2 = shared->n_vac;
  shared->dim_n_RI_3 = shared->n_strain;
  shared->dim_n_RI_op_1 = shared->n;
  shared->dim_n_RI_op_2 = shared->n_vac;
  shared->dim_n_RI_op_3 = shared->n_strain;
  shared->dim_n_RS_1 = shared->n;
  shared->dim_n_RS_2 = shared->n_vac;
  shared->dim_n_RS_3 = shared->n_strain;
  shared->dim_n_SE_1 = shared->n;
  shared->dim_n_SE_2 = shared->n_vac;
  shared->dim_n_SE_3 = shared->n_strain;
  shared->dim_n_SE_tot_1 = shared->n;
  shared->dim_n_SE_tot_2 = shared->n_vac;
  shared->dim_n_SEa_1 = shared->n;
  shared->dim_n_SEa_2 = shared->n_vac;
  shared->dim_n_SEa_3 = shared->n_strain;
  shared->dim_n_SEi_1 = shared->n;
  shared->dim_n_SEi_2 = shared->n_vac;
  shared->dim_n_SEi_3 = shared->n_strain;
  shared->dim_n_waning_1 = shared->n;
  shared->dim_n_waning_2 = shared->n_vac;
  shared->dim_p_HR_1 = shared->n;
  shared->dim_p_HR_2 = shared->n_vac;
  shared->dim_p_HR_3 = shared->n_strain;
  shared->dim_p_ICU_PR_1 = shared->n;
  shared->dim_p_ICU_PR_2 = shared->n_vac;
  shared->dim_p_ICU_PR_3 = shared->n_strain;
  shared->dim_p_ICU_P_1 = shared->n;
  shared->dim_p_ICU_P_2 = shared->n_vac;
  shared->dim_p_ICU_P_3 = shared->n_strain;
  shared->dim_p_ICU_R_1 = shared->n;
  shared->dim_p_ICU_R_2 = shared->n_vac;
  shared->dim_p_ICU_R_3 = shared->n_strain;
  shared->dim_p_SE_1 = shared->n;
  shared->dim_p_SE_2 = shared->n_vac;
  shared->dim_p_SE_3 = shared->n_strain;
  shared->dim_p_hosp_1 = shared->n;
  shared->dim_p_hosp_2 = shared->n_vac;
  shared->dim_p_hosp_3 = shared->n_strain;
  shared->dim_p_hosp_d_1 = shared->n;
  shared->dim_p_hosp_d_2 = shared->n_vac;
  shared->dim_p_hosp_d_3 = shared->n_strain;
  shared->dim_p_hosp_icu_R_1 = shared->n;
  shared->dim_p_hosp_icu_R_2 = shared->n_vac;
  shared->dim_p_hosp_icu_R_3 = shared->n_strain;
  shared->dim_p_icu_1 = shared->n;
  shared->dim_p_icu_2 = shared->n_vac;
  shared->dim_p_icu_3 = shared->n_strain;
  shared->dim_p_icu_d_1 = shared->n;
  shared->dim_p_icu_d_2 = shared->n_vac;
  shared->dim_p_icu_d_3 = shared->n_strain;
  shared->dim_p_waning_1 = shared->n;
  shared->dim_p_waning_2 = shared->n_vac;
  shared->dim_pa_1 = shared->n;
  shared->dim_pa_2 = shared->n_vac;
  shared->dim_pa_3 = shared->n_strain;
  shared->dim_post_icu_1 = shared->n;
  shared->dim_post_icu_2 = shared->n_vac;
  shared->dim_post_icu_3 = shared->n_strain;
  shared->dim_pre_icu_1 = shared->n;
  shared->dim_pre_icu_2 = shared->n_vac;
  shared->dim_pre_icu_3 = shared->n_strain;
  shared->dim_prob_death_hosp_1 = shared->n;
  shared->dim_prob_death_hosp_2 = shared->n_vac;
  shared->dim_prob_death_hosp_3 = shared->n_strain;
  shared->dim_prob_death_icu_1 = shared->n;
  shared->dim_prob_death_icu_2 = shared->n_vac;
  shared->dim_prob_death_icu_3 = shared->n_strain;
  shared->dim_prob_death_non_hosp_1 = shared->n;
  shared->dim_prob_death_non_hosp_2 = shared->n_vac;
  shared->dim_prob_death_non_hosp_3 = shared->n_strain;
  shared->dim_rand_beta_factors = shared->n;
  shared->dim_rel_strain_1 = shared->n;
  shared->dim_rel_strain_2 = shared->n_vac;
  shared->dim_rel_strain_3 = shared->n_strain;
  shared->dim_susceptibility_1 = shared->n;
  shared->dim_susceptibility_2 = shared->n_vac;
  shared->dim_susceptibility_3 = shared->n_strain;
  shared->dim_susceptibility_asymp_1 = shared->n;
  shared->dim_susceptibility_asymp_2 = shared->n_vac;
  shared->dim_susceptibility_asymp_3 = shared->n_strain;
  shared->dim_susceptibility_symp_1 = shared->n;
  shared->dim_susceptibility_symp_2 = shared->n_vac;
  shared->dim_susceptibility_symp_3 = shared->n_strain;
  shared->dim_symp_asymp_effect_1 = shared->n;
  shared->dim_symp_asymp_effect_2 = shared->n_vac;
  shared->dim_symp_asymp_effect_3 = shared->n_strain;
  shared->dim_symp_trans_1 = shared->n;
  shared->dim_symp_trans_2 = shared->n_vac;
  shared->dim_symp_trans_3 = shared->n_strain;
  shared->dim_sympt_frac_1 = shared->n;
  shared->dim_sympt_frac_2 = shared->n_vac;
  shared->dim_sympt_frac_3 = shared->n_strain;
  shared->dim_tot_hosp_1 = shared->n;
  shared->dim_tot_hosp_2 = shared->n_vac;
  shared->dim_tot_hosp_3 = shared->n_strain;
  shared->dim_tot_hosp_ini_1 = shared->n;
  shared->dim_tot_hosp_ini_2 = shared->n_vac;
  shared->dim_tot_hosp_ini_3 = shared->n_strain;
  shared->dim_tot_infected_1 = shared->n;
  shared->dim_tot_infected_2 = shared->n_vac;
  shared->dim_tot_infected_3 = shared->n_strain;
  shared->dim_tot_infected_ini_1 = shared->n;
  shared->dim_tot_infected_ini_2 = shared->n_vac;
  shared->dim_tot_infected_ini_3 = shared->n_strain;
  shared->dim_tot_resp_1 = shared->n;
  shared->dim_tot_resp_2 = shared->n_vac;
  shared->dim_tot_resp_3 = shared->n_strain;
  shared->dim_tot_resp_ini_1 = shared->n;
  shared->dim_tot_resp_ini_2 = shared->n_vac;
  shared->dim_tot_resp_ini_3 = shared->n_strain;
  shared->dim_transmisibility_1 = shared->n;
  shared->dim_transmisibility_2 = shared->n_vac;
  shared->dim_transmisibility_3 = shared->n_strain;
  shared->dim_vaccinations_1 = shared->N_steps;
  shared->dim_vaccinations_2 = shared->n;
  shared->dim_vaccinations_3 = shared->n_vac;
  shared->dim_vax_time_step_1 = shared->n;
  shared->dim_vax_time_step_2 = shared->n_vac;
  shared->dim_waning_immunity_vax_1 = shared->n;
  shared->dim_waning_immunity_vax_2 = shared->n_vac;
  shared->dim_waning_immunity_vax_3 = shared->n_strain;
  shared->dyn_change = user_get_array_fixed<real_type, 1>(user, "dyn_change", shared->dyn_change, {shared->dim_dyn_change}, NA_REAL, NA_REAL);
  shared->initial_beta_thresh = shared->threshold_ini;
  shared->p_D = 1 - std::exp(- shared->dt / (real_type) shared->time_before_death);
  shared->p_D_H = 1 - std::exp(- shared->dt / (real_type) shared->time_before_death_hosp);
  shared->p_D_ICU = 1 - std::exp(- shared->dt / (real_type) shared->time_before_death_icu);
  shared->p_EI = 1 - std::exp(- shared->dt / (real_type) shared->latent_period);
  shared->p_IR = 1 - std::exp(- shared->dt / (real_type) shared->infectious_period);
  shared->p_PI = 1 - std::exp(- shared->dt / (real_type) shared->pre_sympt_period);
  shared->p_waning_inf = 1 - std::exp(- shared->dt / (real_type) shared->waning_inf);
  shared->steps_per_day = 1 / (real_type) shared->dt;
  shared->threshold = user_get_array_fixed<real_type, 1>(user, "threshold", shared->threshold, {shared->dim_threshold}, NA_REAL, NA_REAL);
  internal.beta = std::vector<real_type>(shared->dim_beta);
  shared->initial_hosp_inc = std::vector<real_type>(shared->dim_hosp_inc);
  shared->beta_norm = user_get_array_fixed<real_type, 1>(user, "beta_norm", shared->beta_norm, {shared->dim_beta_norm}, NA_REAL, NA_REAL);
  shared->beta_strain = user_get_array_fixed<real_type, 1>(user, "beta_strain", shared->beta_strain, {shared->dim_beta_strain}, NA_REAL, NA_REAL);
  shared->dim_A = shared->dim_A_1 * shared->dim_A_2 * shared->dim_A_3;
  shared->dim_A_12 = shared->dim_A_1 * shared->dim_A_2;
  shared->dim_A_ini = shared->dim_A_ini_1 * shared->dim_A_ini_2 * shared->dim_A_ini_3;
  shared->dim_A_ini_12 = shared->dim_A_ini_1 * shared->dim_A_ini_2;
  shared->dim_B_D = shared->dim_B_D_1 * shared->dim_B_D_2 * shared->dim_B_D_3;
  shared->dim_B_D_12 = shared->dim_B_D_1 * shared->dim_B_D_2;
  shared->dim_B_D_H = shared->dim_B_D_H_1 * shared->dim_B_D_H_2 * shared->dim_B_D_H_3;
  shared->dim_B_D_H_12 = shared->dim_B_D_H_1 * shared->dim_B_D_H_2;
  shared->dim_B_D_H_ini = shared->dim_B_D_H_ini_1 * shared->dim_B_D_H_ini_2 * shared->dim_B_D_H_ini_3;
  shared->dim_B_D_H_ini_12 = shared->dim_B_D_H_ini_1 * shared->dim_B_D_H_ini_2;
  shared->dim_B_D_ICU = shared->dim_B_D_ICU_1 * shared->dim_B_D_ICU_2 * shared->dim_B_D_ICU_3;
  shared->dim_B_D_ICU_12 = shared->dim_B_D_ICU_1 * shared->dim_B_D_ICU_2;
  shared->dim_B_D_ICU_ini = shared->dim_B_D_ICU_ini_1 * shared->dim_B_D_ICU_ini_2 * shared->dim_B_D_ICU_ini_3;
  shared->dim_B_D_ICU_ini_12 = shared->dim_B_D_ICU_ini_1 * shared->dim_B_D_ICU_ini_2;
  shared->dim_B_D_ini = shared->dim_B_D_ini_1 * shared->dim_B_D_ini_2 * shared->dim_B_D_ini_3;
  shared->dim_B_D_ini_12 = shared->dim_B_D_ini_1 * shared->dim_B_D_ini_2;
  shared->dim_D = shared->dim_D_1 * shared->dim_D_2 * shared->dim_D_3;
  shared->dim_D_12 = shared->dim_D_1 * shared->dim_D_2;
  shared->dim_D_ini = shared->dim_D_ini_1 * shared->dim_D_ini_2 * shared->dim_D_ini_3;
  shared->dim_D_ini_12 = shared->dim_D_ini_1 * shared->dim_D_ini_2;
  shared->dim_Ea = shared->dim_Ea_1 * shared->dim_Ea_2 * shared->dim_Ea_3;
  shared->dim_Ea_12 = shared->dim_Ea_1 * shared->dim_Ea_2;
  shared->dim_Ea_ini = shared->dim_Ea_ini_1 * shared->dim_Ea_ini_2 * shared->dim_Ea_ini_3;
  shared->dim_Ea_ini_12 = shared->dim_Ea_ini_1 * shared->dim_Ea_ini_2;
  shared->dim_Es = shared->dim_Es_1 * shared->dim_Es_2 * shared->dim_Es_3;
  shared->dim_Es_12 = shared->dim_Es_1 * shared->dim_Es_2;
  shared->dim_Es_ini = shared->dim_Es_ini_1 * shared->dim_Es_ini_2 * shared->dim_Es_ini_3;
  shared->dim_Es_ini_12 = shared->dim_Es_ini_1 * shared->dim_Es_ini_2;
  shared->dim_H = shared->dim_H_1 * shared->dim_H_2 * shared->dim_H_3;
  shared->dim_H_12 = shared->dim_H_1 * shared->dim_H_2;
  shared->dim_H_ini = shared->dim_H_ini_1 * shared->dim_H_ini_2 * shared->dim_H_ini_3;
  shared->dim_H_ini_12 = shared->dim_H_ini_1 * shared->dim_H_ini_2;
  shared->dim_I = shared->dim_I_1 * shared->dim_I_2 * shared->dim_I_3;
  shared->dim_ICU_H = shared->dim_ICU_H_1 * shared->dim_ICU_H_2 * shared->dim_ICU_H_3;
  shared->dim_ICU_H_12 = shared->dim_ICU_H_1 * shared->dim_ICU_H_2;
  shared->dim_ICU_H_ini = shared->dim_ICU_H_ini_1 * shared->dim_ICU_H_ini_2 * shared->dim_ICU_H_ini_3;
  shared->dim_ICU_H_ini_12 = shared->dim_ICU_H_ini_1 * shared->dim_ICU_H_ini_2;
  shared->dim_ICU_P = shared->dim_ICU_P_1 * shared->dim_ICU_P_2 * shared->dim_ICU_P_3;
  shared->dim_ICU_P_12 = shared->dim_ICU_P_1 * shared->dim_ICU_P_2;
  shared->dim_ICU_P_ini = shared->dim_ICU_P_ini_1 * shared->dim_ICU_P_ini_2 * shared->dim_ICU_P_ini_3;
  shared->dim_ICU_P_ini_12 = shared->dim_ICU_P_ini_1 * shared->dim_ICU_P_ini_2;
  shared->dim_ICU_R = shared->dim_ICU_R_1 * shared->dim_ICU_R_2 * shared->dim_ICU_R_3;
  shared->dim_ICU_R_12 = shared->dim_ICU_R_1 * shared->dim_ICU_R_2;
  shared->dim_ICU_R_ini = shared->dim_ICU_R_ini_1 * shared->dim_ICU_R_ini_2 * shared->dim_ICU_R_ini_3;
  shared->dim_ICU_R_ini_12 = shared->dim_ICU_R_ini_1 * shared->dim_ICU_R_ini_2;
  shared->dim_I_12 = shared->dim_I_1 * shared->dim_I_2;
  shared->dim_I_imp_ini = shared->dim_I_imp_ini_1 * shared->dim_I_imp_ini_2 * shared->dim_I_imp_ini_3;
  shared->dim_I_imp_ini_12 = shared->dim_I_imp_ini_1 * shared->dim_I_imp_ini_2;
  shared->dim_I_ini = shared->dim_I_ini_1 * shared->dim_I_ini_2 * shared->dim_I_ini_3;
  shared->dim_I_ini_12 = shared->dim_I_ini_1 * shared->dim_I_ini_2;
  shared->dim_N = shared->dim_N_1 * shared->dim_N_2;
  shared->dim_N_imp = shared->dim_N_imp_1 * shared->dim_N_imp_2 * shared->dim_N_imp_3;
  shared->dim_N_imp_12 = shared->dim_N_imp_1 * shared->dim_N_imp_2;
  shared->dim_P = shared->dim_P_1 * shared->dim_P_2 * shared->dim_P_3;
  shared->dim_P_12 = shared->dim_P_1 * shared->dim_P_2;
  shared->dim_P_ini = shared->dim_P_ini_1 * shared->dim_P_ini_2 * shared->dim_P_ini_3;
  shared->dim_P_ini_12 = shared->dim_P_ini_1 * shared->dim_P_ini_2;
  shared->dim_R = shared->dim_R_1 * shared->dim_R_2 * shared->dim_R_3;
  shared->dim_R_12 = shared->dim_R_1 * shared->dim_R_2;
  shared->dim_R_ini = shared->dim_R_ini_1 * shared->dim_R_ini_2 * shared->dim_R_ini_3;
  shared->dim_R_ini_12 = shared->dim_R_ini_1 * shared->dim_R_ini_2;
  shared->dim_S = shared->dim_S_1 * shared->dim_S_2;
  shared->dim_S_ini = shared->dim_S_ini_1 * shared->dim_S_ini_2;
  shared->dim_T_waning = shared->dim_T_waning_1 * shared->dim_T_waning_2;
  shared->dim_asympt_frac = shared->dim_asympt_frac_1 * shared->dim_asympt_frac_2 * shared->dim_asympt_frac_3;
  shared->dim_asympt_frac_12 = shared->dim_asympt_frac_1 * shared->dim_asympt_frac_2;
  shared->dim_beta_day = shared->dim_beta_day_1 * shared->dim_beta_day_2;
  shared->dim_cross_protection = shared->dim_cross_protection_1 * shared->dim_cross_protection_2;
  shared->dim_hosp_prob = shared->dim_hosp_prob_1 * shared->dim_hosp_prob_2 * shared->dim_hosp_prob_3;
  shared->dim_hosp_prob_12 = shared->dim_hosp_prob_1 * shared->dim_hosp_prob_2;
  shared->dim_icu_prob = shared->dim_icu_prob_1 * shared->dim_icu_prob_2 * shared->dim_icu_prob_3;
  shared->dim_icu_prob_12 = shared->dim_icu_prob_1 * shared->dim_icu_prob_2;
  shared->dim_import_vec = shared->dim_import_vec_1 * shared->dim_import_vec_2 * shared->dim_import_vec_3 * shared->dim_import_vec_4;
  shared->dim_import_vec_12 = shared->dim_import_vec_1 * shared->dim_import_vec_2;
  shared->dim_import_vec_123 = shared->dim_import_vec_1 * shared->dim_import_vec_2 * shared->dim_import_vec_3;
  shared->dim_lambda_ij = shared->dim_lambda_ij_1 * shared->dim_lambda_ij_2 * shared->dim_lambda_ij_3 * shared->dim_lambda_ij_4 * shared->dim_lambda_ij_5;
  shared->dim_lambda_ij_12 = shared->dim_lambda_ij_1 * shared->dim_lambda_ij_2;
  shared->dim_lambda_ij_123 = shared->dim_lambda_ij_1 * shared->dim_lambda_ij_2 * shared->dim_lambda_ij_3;
  shared->dim_lambda_ij_1234 = shared->dim_lambda_ij_1 * shared->dim_lambda_ij_2 * shared->dim_lambda_ij_3 * shared->dim_lambda_ij_4;
  shared->dim_length_hosp = shared->dim_length_hosp_1 * shared->dim_length_hosp_2 * shared->dim_length_hosp_3;
  shared->dim_length_hosp_12 = shared->dim_length_hosp_1 * shared->dim_length_hosp_2;
  shared->dim_length_icu = shared->dim_length_icu_1 * shared->dim_length_icu_2 * shared->dim_length_icu_3;
  shared->dim_length_icu_12 = shared->dim_length_icu_1 * shared->dim_length_icu_2;
  shared->dim_mixing_matrix = shared->dim_mixing_matrix_1 * shared->dim_mixing_matrix_2;
  shared->dim_n_AR = shared->dim_n_AR_1 * shared->dim_n_AR_2 * shared->dim_n_AR_3;
  shared->dim_n_AR_12 = shared->dim_n_AR_1 * shared->dim_n_AR_2;
  shared->dim_n_B_D_D = shared->dim_n_B_D_D_1 * shared->dim_n_B_D_D_2 * shared->dim_n_B_D_D_3;
  shared->dim_n_B_D_D_12 = shared->dim_n_B_D_D_1 * shared->dim_n_B_D_D_2;
  shared->dim_n_B_H_D = shared->dim_n_B_H_D_1 * shared->dim_n_B_H_D_2 * shared->dim_n_B_H_D_3;
  shared->dim_n_B_H_D_12 = shared->dim_n_B_H_D_1 * shared->dim_n_B_H_D_2;
  shared->dim_n_B_ICU_D = shared->dim_n_B_ICU_D_1 * shared->dim_n_B_ICU_D_2 * shared->dim_n_B_ICU_D_3;
  shared->dim_n_B_ICU_D_12 = shared->dim_n_B_ICU_D_1 * shared->dim_n_B_ICU_D_2;
  shared->dim_n_EaA = shared->dim_n_EaA_1 * shared->dim_n_EaA_2 * shared->dim_n_EaA_3;
  shared->dim_n_EaA_12 = shared->dim_n_EaA_1 * shared->dim_n_EaA_2;
  shared->dim_n_EsI = shared->dim_n_EsI_1 * shared->dim_n_EsI_2 * shared->dim_n_EsI_3;
  shared->dim_n_EsI_12 = shared->dim_n_EsI_1 * shared->dim_n_EsI_2;
  shared->dim_n_H = shared->dim_n_H_1 * shared->dim_n_H_2 * shared->dim_n_H_3;
  shared->dim_n_HD = shared->dim_n_HD_1 * shared->dim_n_HD_2 * shared->dim_n_HD_3;
  shared->dim_n_HD_12 = shared->dim_n_HD_1 * shared->dim_n_HD_2;
  shared->dim_n_HR = shared->dim_n_HR_1 * shared->dim_n_HR_2 * shared->dim_n_HR_3;
  shared->dim_n_HR_12 = shared->dim_n_HR_1 * shared->dim_n_HR_2;
  shared->dim_n_H_12 = shared->dim_n_H_1 * shared->dim_n_H_2;
  shared->dim_n_I = shared->dim_n_I_1 * shared->dim_n_I_2 * shared->dim_n_I_3;
  shared->dim_n_ICU_D = shared->dim_n_ICU_D_1 * shared->dim_n_ICU_D_2 * shared->dim_n_ICU_D_3;
  shared->dim_n_ICU_D_12 = shared->dim_n_ICU_D_1 * shared->dim_n_ICU_D_2;
  shared->dim_n_ICU_HR = shared->dim_n_ICU_HR_1 * shared->dim_n_ICU_HR_2 * shared->dim_n_ICU_HR_3;
  shared->dim_n_ICU_HR_12 = shared->dim_n_ICU_HR_1 * shared->dim_n_ICU_HR_2;
  shared->dim_n_ICU_P = shared->dim_n_ICU_P_1 * shared->dim_n_ICU_P_2 * shared->dim_n_ICU_P_3;
  shared->dim_n_ICU_P_12 = shared->dim_n_ICU_P_1 * shared->dim_n_ICU_P_2;
  shared->dim_n_ICU_R = shared->dim_n_ICU_R_1 * shared->dim_n_ICU_R_2 * shared->dim_n_ICU_R_3;
  shared->dim_n_ICU_RP = shared->dim_n_ICU_RP_1 * shared->dim_n_ICU_RP_2 * shared->dim_n_ICU_RP_3;
  shared->dim_n_ICU_RP_12 = shared->dim_n_ICU_RP_1 * shared->dim_n_ICU_RP_2;
  shared->dim_n_ICU_R_12 = shared->dim_n_ICU_R_1 * shared->dim_n_ICU_R_2;
  shared->dim_n_ID = shared->dim_n_ID_1 * shared->dim_n_ID_2 * shared->dim_n_ID_3;
  shared->dim_n_ID_12 = shared->dim_n_ID_1 * shared->dim_n_ID_2;
  shared->dim_n_IH = shared->dim_n_IH_1 * shared->dim_n_IH_2 * shared->dim_n_IH_3;
  shared->dim_n_IH_12 = shared->dim_n_IH_1 * shared->dim_n_IH_2;
  shared->dim_n_IICU = shared->dim_n_IICU_1 * shared->dim_n_IICU_2 * shared->dim_n_IICU_3;
  shared->dim_n_IICU_12 = shared->dim_n_IICU_1 * shared->dim_n_IICU_2;
  shared->dim_n_IR = shared->dim_n_IR_1 * shared->dim_n_IR_2 * shared->dim_n_IR_3;
  shared->dim_n_IR_12 = shared->dim_n_IR_1 * shared->dim_n_IR_2;
  shared->dim_n_I_12 = shared->dim_n_I_1 * shared->dim_n_I_2;
  shared->dim_n_PI = shared->dim_n_PI_1 * shared->dim_n_PI_2 * shared->dim_n_PI_3;
  shared->dim_n_PI_12 = shared->dim_n_PI_1 * shared->dim_n_PI_2;
  shared->dim_n_RI = shared->dim_n_RI_1 * shared->dim_n_RI_2 * shared->dim_n_RI_3;
  shared->dim_n_RIA = shared->dim_n_RIA_1 * shared->dim_n_RIA_2 * shared->dim_n_RIA_3;
  shared->dim_n_RIA_12 = shared->dim_n_RIA_1 * shared->dim_n_RIA_2;
  shared->dim_n_RIS = shared->dim_n_RIS_1 * shared->dim_n_RIS_2 * shared->dim_n_RIS_3;
  shared->dim_n_RIS_12 = shared->dim_n_RIS_1 * shared->dim_n_RIS_2;
  shared->dim_n_RI_12 = shared->dim_n_RI_1 * shared->dim_n_RI_2;
  shared->dim_n_RI_op = shared->dim_n_RI_op_1 * shared->dim_n_RI_op_2 * shared->dim_n_RI_op_3;
  shared->dim_n_RI_op_12 = shared->dim_n_RI_op_1 * shared->dim_n_RI_op_2;
  shared->dim_n_RS = shared->dim_n_RS_1 * shared->dim_n_RS_2 * shared->dim_n_RS_3;
  shared->dim_n_RS_12 = shared->dim_n_RS_1 * shared->dim_n_RS_2;
  shared->dim_n_SE = shared->dim_n_SE_1 * shared->dim_n_SE_2 * shared->dim_n_SE_3;
  shared->dim_n_SE_12 = shared->dim_n_SE_1 * shared->dim_n_SE_2;
  shared->dim_n_SE_tot = shared->dim_n_SE_tot_1 * shared->dim_n_SE_tot_2;
  shared->dim_n_SEa = shared->dim_n_SEa_1 * shared->dim_n_SEa_2 * shared->dim_n_SEa_3;
  shared->dim_n_SEa_12 = shared->dim_n_SEa_1 * shared->dim_n_SEa_2;
  shared->dim_n_SEi = shared->dim_n_SEi_1 * shared->dim_n_SEi_2 * shared->dim_n_SEi_3;
  shared->dim_n_SEi_12 = shared->dim_n_SEi_1 * shared->dim_n_SEi_2;
  shared->dim_n_waning = shared->dim_n_waning_1 * shared->dim_n_waning_2;
  shared->dim_p_HR = shared->dim_p_HR_1 * shared->dim_p_HR_2 * shared->dim_p_HR_3;
  shared->dim_p_HR_12 = shared->dim_p_HR_1 * shared->dim_p_HR_2;
  shared->dim_p_ICU_P = shared->dim_p_ICU_P_1 * shared->dim_p_ICU_P_2 * shared->dim_p_ICU_P_3;
  shared->dim_p_ICU_PR = shared->dim_p_ICU_PR_1 * shared->dim_p_ICU_PR_2 * shared->dim_p_ICU_PR_3;
  shared->dim_p_ICU_PR_12 = shared->dim_p_ICU_PR_1 * shared->dim_p_ICU_PR_2;
  shared->dim_p_ICU_P_12 = shared->dim_p_ICU_P_1 * shared->dim_p_ICU_P_2;
  shared->dim_p_ICU_R = shared->dim_p_ICU_R_1 * shared->dim_p_ICU_R_2 * shared->dim_p_ICU_R_3;
  shared->dim_p_ICU_R_12 = shared->dim_p_ICU_R_1 * shared->dim_p_ICU_R_2;
  shared->dim_p_SE = shared->dim_p_SE_1 * shared->dim_p_SE_2 * shared->dim_p_SE_3;
  shared->dim_p_SE_12 = shared->dim_p_SE_1 * shared->dim_p_SE_2;
  shared->dim_p_hosp = shared->dim_p_hosp_1 * shared->dim_p_hosp_2 * shared->dim_p_hosp_3;
  shared->dim_p_hosp_12 = shared->dim_p_hosp_1 * shared->dim_p_hosp_2;
  shared->dim_p_hosp_d = shared->dim_p_hosp_d_1 * shared->dim_p_hosp_d_2 * shared->dim_p_hosp_d_3;
  shared->dim_p_hosp_d_12 = shared->dim_p_hosp_d_1 * shared->dim_p_hosp_d_2;
  shared->dim_p_hosp_icu_R = shared->dim_p_hosp_icu_R_1 * shared->dim_p_hosp_icu_R_2 * shared->dim_p_hosp_icu_R_3;
  shared->dim_p_hosp_icu_R_12 = shared->dim_p_hosp_icu_R_1 * shared->dim_p_hosp_icu_R_2;
  shared->dim_p_icu = shared->dim_p_icu_1 * shared->dim_p_icu_2 * shared->dim_p_icu_3;
  shared->dim_p_icu_12 = shared->dim_p_icu_1 * shared->dim_p_icu_2;
  shared->dim_p_icu_d = shared->dim_p_icu_d_1 * shared->dim_p_icu_d_2 * shared->dim_p_icu_d_3;
  shared->dim_p_icu_d_12 = shared->dim_p_icu_d_1 * shared->dim_p_icu_d_2;
  shared->dim_p_waning = shared->dim_p_waning_1 * shared->dim_p_waning_2;
  shared->dim_pa = shared->dim_pa_1 * shared->dim_pa_2 * shared->dim_pa_3;
  shared->dim_pa_12 = shared->dim_pa_1 * shared->dim_pa_2;
  shared->dim_post_icu = shared->dim_post_icu_1 * shared->dim_post_icu_2 * shared->dim_post_icu_3;
  shared->dim_post_icu_12 = shared->dim_post_icu_1 * shared->dim_post_icu_2;
  shared->dim_pre_icu = shared->dim_pre_icu_1 * shared->dim_pre_icu_2 * shared->dim_pre_icu_3;
  shared->dim_pre_icu_12 = shared->dim_pre_icu_1 * shared->dim_pre_icu_2;
  shared->dim_prob_death_hosp = shared->dim_prob_death_hosp_1 * shared->dim_prob_death_hosp_2 * shared->dim_prob_death_hosp_3;
  shared->dim_prob_death_hosp_12 = shared->dim_prob_death_hosp_1 * shared->dim_prob_death_hosp_2;
  shared->dim_prob_death_icu = shared->dim_prob_death_icu_1 * shared->dim_prob_death_icu_2 * shared->dim_prob_death_icu_3;
  shared->dim_prob_death_icu_12 = shared->dim_prob_death_icu_1 * shared->dim_prob_death_icu_2;
  shared->dim_prob_death_non_hosp = shared->dim_prob_death_non_hosp_1 * shared->dim_prob_death_non_hosp_2 * shared->dim_prob_death_non_hosp_3;
  shared->dim_prob_death_non_hosp_12 = shared->dim_prob_death_non_hosp_1 * shared->dim_prob_death_non_hosp_2;
  shared->dim_rel_strain = shared->dim_rel_strain_1 * shared->dim_rel_strain_2 * shared->dim_rel_strain_3;
  shared->dim_rel_strain_12 = shared->dim_rel_strain_1 * shared->dim_rel_strain_2;
  shared->dim_susceptibility = shared->dim_susceptibility_1 * shared->dim_susceptibility_2 * shared->dim_susceptibility_3;
  shared->dim_susceptibility_12 = shared->dim_susceptibility_1 * shared->dim_susceptibility_2;
  shared->dim_susceptibility_asymp = shared->dim_susceptibility_asymp_1 * shared->dim_susceptibility_asymp_2 * shared->dim_susceptibility_asymp_3;
  shared->dim_susceptibility_asymp_12 = shared->dim_susceptibility_asymp_1 * shared->dim_susceptibility_asymp_2;
  shared->dim_susceptibility_symp = shared->dim_susceptibility_symp_1 * shared->dim_susceptibility_symp_2 * shared->dim_susceptibility_symp_3;
  shared->dim_susceptibility_symp_12 = shared->dim_susceptibility_symp_1 * shared->dim_susceptibility_symp_2;
  shared->dim_symp_asymp_effect = shared->dim_symp_asymp_effect_1 * shared->dim_symp_asymp_effect_2 * shared->dim_symp_asymp_effect_3;
  shared->dim_symp_asymp_effect_12 = shared->dim_symp_asymp_effect_1 * shared->dim_symp_asymp_effect_2;
  shared->dim_symp_trans = shared->dim_symp_trans_1 * shared->dim_symp_trans_2 * shared->dim_symp_trans_3;
  shared->dim_symp_trans_12 = shared->dim_symp_trans_1 * shared->dim_symp_trans_2;
  shared->dim_sympt_frac = shared->dim_sympt_frac_1 * shared->dim_sympt_frac_2 * shared->dim_sympt_frac_3;
  shared->dim_sympt_frac_12 = shared->dim_sympt_frac_1 * shared->dim_sympt_frac_2;
  shared->dim_tot_hosp = shared->dim_tot_hosp_1 * shared->dim_tot_hosp_2 * shared->dim_tot_hosp_3;
  shared->dim_tot_hosp_12 = shared->dim_tot_hosp_1 * shared->dim_tot_hosp_2;
  shared->dim_tot_hosp_ini = shared->dim_tot_hosp_ini_1 * shared->dim_tot_hosp_ini_2 * shared->dim_tot_hosp_ini_3;
  shared->dim_tot_hosp_ini_12 = shared->dim_tot_hosp_ini_1 * shared->dim_tot_hosp_ini_2;
  shared->dim_tot_infected = shared->dim_tot_infected_1 * shared->dim_tot_infected_2 * shared->dim_tot_infected_3;
  shared->dim_tot_infected_12 = shared->dim_tot_infected_1 * shared->dim_tot_infected_2;
  shared->dim_tot_infected_ini = shared->dim_tot_infected_ini_1 * shared->dim_tot_infected_ini_2 * shared->dim_tot_infected_ini_3;
  shared->dim_tot_infected_ini_12 = shared->dim_tot_infected_ini_1 * shared->dim_tot_infected_ini_2;
  shared->dim_tot_resp = shared->dim_tot_resp_1 * shared->dim_tot_resp_2 * shared->dim_tot_resp_3;
  shared->dim_tot_resp_12 = shared->dim_tot_resp_1 * shared->dim_tot_resp_2;
  shared->dim_tot_resp_ini = shared->dim_tot_resp_ini_1 * shared->dim_tot_resp_ini_2 * shared->dim_tot_resp_ini_3;
  shared->dim_tot_resp_ini_12 = shared->dim_tot_resp_ini_1 * shared->dim_tot_resp_ini_2;
  shared->dim_transmisibility = shared->dim_transmisibility_1 * shared->dim_transmisibility_2 * shared->dim_transmisibility_3;
  shared->dim_transmisibility_12 = shared->dim_transmisibility_1 * shared->dim_transmisibility_2;
  shared->dim_vaccinations = shared->dim_vaccinations_1 * shared->dim_vaccinations_2 * shared->dim_vaccinations_3;
  shared->dim_vaccinations_12 = shared->dim_vaccinations_1 * shared->dim_vaccinations_2;
  shared->dim_vax_time_step = shared->dim_vax_time_step_1 * shared->dim_vax_time_step_2;
  shared->dim_waning_immunity_vax = shared->dim_waning_immunity_vax_1 * shared->dim_waning_immunity_vax_2 * shared->dim_waning_immunity_vax_3;
  shared->dim_waning_immunity_vax_12 = shared->dim_waning_immunity_vax_1 * shared->dim_waning_immunity_vax_2;
  shared->initial_beta_dyn_change = shared->dyn_change[0];
  for (int i = 1; i <= shared->dim_hosp_inc; ++i) {
    shared->initial_hosp_inc[i - 1] = 0;
  }
  shared->offset_variable_S = shared->dim_hosp_inc + 9;
  shared->rand_beta_factors = user_get_array_fixed<real_type, 1>(user, "rand_beta_factors", shared->rand_beta_factors, {shared->dim_rand_beta_factors}, NA_REAL, NA_REAL);
  shared->A_ini = user_get_array_fixed<real_type, 3>(user, "A_ini", shared->A_ini, {shared->dim_A_ini_1, shared->dim_A_ini_2, shared->dim_A_ini_3}, NA_REAL, NA_REAL);
  shared->B_D_H_ini = user_get_array_fixed<real_type, 3>(user, "B_D_H_ini", shared->B_D_H_ini, {shared->dim_B_D_H_ini_1, shared->dim_B_D_H_ini_2, shared->dim_B_D_H_ini_3}, NA_REAL, NA_REAL);
  shared->B_D_ICU_ini = user_get_array_fixed<real_type, 3>(user, "B_D_ICU_ini", shared->B_D_ICU_ini, {shared->dim_B_D_ICU_ini_1, shared->dim_B_D_ICU_ini_2, shared->dim_B_D_ICU_ini_3}, NA_REAL, NA_REAL);
  shared->B_D_ini = user_get_array_fixed<real_type, 3>(user, "B_D_ini", shared->B_D_ini, {shared->dim_B_D_ini_1, shared->dim_B_D_ini_2, shared->dim_B_D_ini_3}, NA_REAL, NA_REAL);
  shared->D_ini = user_get_array_fixed<real_type, 3>(user, "D_ini", shared->D_ini, {shared->dim_D_ini_1, shared->dim_D_ini_2, shared->dim_D_ini_3}, NA_REAL, NA_REAL);
  shared->Ea_ini = user_get_array_fixed<real_type, 3>(user, "Ea_ini", shared->Ea_ini, {shared->dim_Ea_ini_1, shared->dim_Ea_ini_2, shared->dim_Ea_ini_3}, NA_REAL, NA_REAL);
  shared->Es_ini = user_get_array_fixed<real_type, 3>(user, "Es_ini", shared->Es_ini, {shared->dim_Es_ini_1, shared->dim_Es_ini_2, shared->dim_Es_ini_3}, NA_REAL, NA_REAL);
  shared->H_ini = user_get_array_fixed<real_type, 3>(user, "H_ini", shared->H_ini, {shared->dim_H_ini_1, shared->dim_H_ini_2, shared->dim_H_ini_3}, NA_REAL, NA_REAL);
  shared->ICU_H_ini = user_get_array_fixed<real_type, 3>(user, "ICU_H_ini", shared->ICU_H_ini, {shared->dim_ICU_H_ini_1, shared->dim_ICU_H_ini_2, shared->dim_ICU_H_ini_3}, NA_REAL, NA_REAL);
  shared->ICU_P_ini = user_get_array_fixed<real_type, 3>(user, "ICU_P_ini", shared->ICU_P_ini, {shared->dim_ICU_P_ini_1, shared->dim_ICU_P_ini_2, shared->dim_ICU_P_ini_3}, NA_REAL, NA_REAL);
  shared->ICU_R_ini = user_get_array_fixed<real_type, 3>(user, "ICU_R_ini", shared->ICU_R_ini, {shared->dim_ICU_R_ini_1, shared->dim_ICU_R_ini_2, shared->dim_ICU_R_ini_3}, NA_REAL, NA_REAL);
  shared->I_imp_ini = user_get_array_fixed<real_type, 3>(user, "I_imp_ini", shared->I_imp_ini, {shared->dim_I_imp_ini_1, shared->dim_I_imp_ini_2, shared->dim_I_imp_ini_3}, NA_REAL, NA_REAL);
  shared->I_ini = user_get_array_fixed<real_type, 3>(user, "I_ini", shared->I_ini, {shared->dim_I_ini_1, shared->dim_I_ini_2, shared->dim_I_ini_3}, NA_REAL, NA_REAL);
  shared->P_ini = user_get_array_fixed<real_type, 3>(user, "P_ini", shared->P_ini, {shared->dim_P_ini_1, shared->dim_P_ini_2, shared->dim_P_ini_3}, NA_REAL, NA_REAL);
  shared->R_ini = user_get_array_fixed<real_type, 3>(user, "R_ini", shared->R_ini, {shared->dim_R_ini_1, shared->dim_R_ini_2, shared->dim_R_ini_3}, NA_REAL, NA_REAL);
  shared->S_ini = user_get_array_fixed<real_type, 2>(user, "S_ini", shared->S_ini, {shared->dim_S_ini_1, shared->dim_S_ini_2}, NA_REAL, NA_REAL);
  shared->T_waning = user_get_array_fixed<real_type, 2>(user, "T_waning", shared->T_waning, {shared->dim_T_waning_1, shared->dim_T_waning_2}, NA_REAL, NA_REAL);
  internal.N = std::vector<real_type>(shared->dim_N);
  internal.N_imp = std::vector<real_type>(shared->dim_N_imp);
  shared->initial_A = std::vector<real_type>(shared->dim_A);
  shared->initial_B_D = std::vector<real_type>(shared->dim_B_D);
  shared->initial_B_D_H = std::vector<real_type>(shared->dim_B_D_H);
  shared->initial_B_D_ICU = std::vector<real_type>(shared->dim_B_D_ICU);
  shared->initial_D = std::vector<real_type>(shared->dim_D);
  shared->initial_Ea = std::vector<real_type>(shared->dim_Ea);
  shared->initial_Es = std::vector<real_type>(shared->dim_Es);
  shared->initial_H = std::vector<real_type>(shared->dim_H);
  shared->initial_I = std::vector<real_type>(shared->dim_I);
  shared->initial_ICU_H = std::vector<real_type>(shared->dim_ICU_H);
  shared->initial_ICU_P = std::vector<real_type>(shared->dim_ICU_P);
  shared->initial_ICU_R = std::vector<real_type>(shared->dim_ICU_R);
  shared->initial_P = std::vector<real_type>(shared->dim_P);
  shared->initial_R = std::vector<real_type>(shared->dim_R);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  shared->initial_tot_hosp = std::vector<real_type>(shared->dim_tot_hosp);
  shared->initial_tot_infected = std::vector<real_type>(shared->dim_tot_infected);
  shared->initial_tot_resp = std::vector<real_type>(shared->dim_tot_resp);
  internal.lambda_ij = std::vector<real_type>(shared->dim_lambda_ij);
  internal.n_AR = std::vector<real_type>(shared->dim_n_AR);
  internal.n_B_D_D = std::vector<real_type>(shared->dim_n_B_D_D);
  internal.n_B_H_D = std::vector<real_type>(shared->dim_n_B_H_D);
  internal.n_B_ICU_D = std::vector<real_type>(shared->dim_n_B_ICU_D);
  internal.n_EaA = std::vector<real_type>(shared->dim_n_EaA);
  internal.n_EsI = std::vector<real_type>(shared->dim_n_EsI);
  internal.n_H = std::vector<real_type>(shared->dim_n_H);
  internal.n_HD = std::vector<real_type>(shared->dim_n_HD);
  internal.n_HR = std::vector<real_type>(shared->dim_n_HR);
  internal.n_I = std::vector<real_type>(shared->dim_n_I);
  internal.n_ICU_D = std::vector<real_type>(shared->dim_n_ICU_D);
  internal.n_ICU_HR = std::vector<real_type>(shared->dim_n_ICU_HR);
  internal.n_ICU_P = std::vector<real_type>(shared->dim_n_ICU_P);
  internal.n_ICU_R = std::vector<real_type>(shared->dim_n_ICU_R);
  internal.n_ICU_RP = std::vector<real_type>(shared->dim_n_ICU_RP);
  internal.n_ID = std::vector<real_type>(shared->dim_n_ID);
  internal.n_IH = std::vector<real_type>(shared->dim_n_IH);
  internal.n_IICU = std::vector<real_type>(shared->dim_n_IICU);
  internal.n_IR = std::vector<real_type>(shared->dim_n_IR);
  internal.n_PI = std::vector<real_type>(shared->dim_n_PI);
  internal.n_RI = std::vector<real_type>(shared->dim_n_RI);
  internal.n_RIA = std::vector<real_type>(shared->dim_n_RIA);
  internal.n_RIS = std::vector<real_type>(shared->dim_n_RIS);
  internal.n_RI_op = std::vector<real_type>(shared->dim_n_RI_op);
  internal.n_RS = std::vector<real_type>(shared->dim_n_RS);
  internal.n_SE = std::vector<real_type>(shared->dim_n_SE);
  internal.n_SE_tot = std::vector<real_type>(shared->dim_n_SE_tot);
  internal.n_SEa = std::vector<real_type>(shared->dim_n_SEa);
  internal.n_SEi = std::vector<real_type>(shared->dim_n_SEi);
  internal.n_waning = std::vector<real_type>(shared->dim_n_waning);
  shared->p_HR = std::vector<real_type>(shared->dim_p_HR);
  shared->p_ICU_P = std::vector<real_type>(shared->dim_p_ICU_P);
  shared->p_ICU_PR = std::vector<real_type>(shared->dim_p_ICU_PR);
  shared->p_ICU_R = std::vector<real_type>(shared->dim_p_ICU_R);
  internal.p_SE = std::vector<real_type>(shared->dim_p_SE);
  shared->p_hosp = std::vector<real_type>(shared->dim_p_hosp);
  shared->p_hosp_d = std::vector<real_type>(shared->dim_p_hosp_d);
  shared->p_hosp_icu_R = std::vector<real_type>(shared->dim_p_hosp_icu_R);
  shared->p_icu = std::vector<real_type>(shared->dim_p_icu);
  shared->p_icu_d = std::vector<real_type>(shared->dim_p_icu_d);
  shared->p_waning = std::vector<real_type>(shared->dim_p_waning);
  shared->pa = std::vector<real_type>(shared->dim_pa);
  internal.rel_strain = std::vector<real_type>(shared->dim_rel_strain);
  shared->symp_asymp_effect = std::vector<real_type>(shared->dim_symp_asymp_effect);
  internal.vax_time_step = std::vector<real_type>(shared->dim_vax_time_step);
  shared->asympt_frac = user_get_array_fixed<real_type, 3>(user, "asympt_frac", shared->asympt_frac, {shared->dim_asympt_frac_1, shared->dim_asympt_frac_2, shared->dim_asympt_frac_3}, NA_REAL, NA_REAL);
  shared->beta_day = user_get_array_fixed<real_type, 2>(user, "beta_day", shared->beta_day, {shared->dim_beta_day_1, shared->dim_beta_day_2}, NA_REAL, NA_REAL);
  shared->cross_protection = user_get_array_fixed<real_type, 2>(user, "cross_protection", shared->cross_protection, {shared->dim_cross_protection_1, shared->dim_cross_protection_2}, NA_REAL, NA_REAL);
  shared->hosp_prob = user_get_array_fixed<real_type, 3>(user, "hosp_prob", shared->hosp_prob, {shared->dim_hosp_prob_1, shared->dim_hosp_prob_2, shared->dim_hosp_prob_3}, NA_REAL, NA_REAL);
  shared->icu_prob = user_get_array_fixed<real_type, 3>(user, "icu_prob", shared->icu_prob, {shared->dim_icu_prob_1, shared->dim_icu_prob_2, shared->dim_icu_prob_3}, NA_REAL, NA_REAL);
  shared->import_vec = user_get_array_fixed<real_type, 4>(user, "import_vec", shared->import_vec, {shared->dim_import_vec_1, shared->dim_import_vec_2, shared->dim_import_vec_3, shared->dim_import_vec_4}, NA_REAL, NA_REAL);
  shared->length_hosp = user_get_array_fixed<real_type, 3>(user, "length_hosp", shared->length_hosp, {shared->dim_length_hosp_1, shared->dim_length_hosp_2, shared->dim_length_hosp_3}, NA_REAL, NA_REAL);
  shared->length_icu = user_get_array_fixed<real_type, 3>(user, "length_icu", shared->length_icu, {shared->dim_length_icu_1, shared->dim_length_icu_2, shared->dim_length_icu_3}, NA_REAL, NA_REAL);
  shared->mixing_matrix = user_get_array_fixed<real_type, 2>(user, "mixing_matrix", shared->mixing_matrix, {shared->dim_mixing_matrix_1, shared->dim_mixing_matrix_2}, NA_REAL, NA_REAL);
  shared->offset_variable_A = shared->dim_Ea + shared->dim_Es + shared->dim_I + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_B_D = shared->dim_A + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_B_D_H = shared->dim_A + shared->dim_B_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_B_D_ICU = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_D = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_Ea = shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_Es = shared->dim_Ea + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_H = shared->dim_A + shared->dim_Ea + shared->dim_Es + shared->dim_I + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_I = shared->dim_Ea + shared->dim_Es + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_ICU_H = shared->dim_A + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_ICU_P = shared->dim_A + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_R + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_ICU_R = shared->dim_A + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_P = shared->dim_Ea + shared->dim_Es + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_R = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_tot_hosp = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + shared->dim_tot_infected + 9;
  shared->offset_variable_tot_infected = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + 9;
  shared->offset_variable_tot_resp = shared->dim_A + shared->dim_B_D + shared->dim_B_D_H + shared->dim_B_D_ICU + shared->dim_D + shared->dim_Ea + shared->dim_Es + shared->dim_H + shared->dim_I + shared->dim_ICU_H + shared->dim_ICU_P + shared->dim_ICU_R + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_hosp_inc + shared->dim_tot_hosp + shared->dim_tot_infected + 9;
  shared->post_icu = user_get_array_fixed<real_type, 3>(user, "post_icu", shared->post_icu, {shared->dim_post_icu_1, shared->dim_post_icu_2, shared->dim_post_icu_3}, NA_REAL, NA_REAL);
  shared->pre_icu = user_get_array_fixed<real_type, 3>(user, "pre_icu", shared->pre_icu, {shared->dim_pre_icu_1, shared->dim_pre_icu_2, shared->dim_pre_icu_3}, NA_REAL, NA_REAL);
  shared->prob_death_hosp = user_get_array_fixed<real_type, 3>(user, "prob_death_hosp", shared->prob_death_hosp, {shared->dim_prob_death_hosp_1, shared->dim_prob_death_hosp_2, shared->dim_prob_death_hosp_3}, NA_REAL, NA_REAL);
  shared->prob_death_icu = user_get_array_fixed<real_type, 3>(user, "prob_death_icu", shared->prob_death_icu, {shared->dim_prob_death_icu_1, shared->dim_prob_death_icu_2, shared->dim_prob_death_icu_3}, NA_REAL, NA_REAL);
  shared->prob_death_non_hosp = user_get_array_fixed<real_type, 3>(user, "prob_death_non_hosp", shared->prob_death_non_hosp, {shared->dim_prob_death_non_hosp_1, shared->dim_prob_death_non_hosp_2, shared->dim_prob_death_non_hosp_3}, NA_REAL, NA_REAL);
  shared->susceptibility = user_get_array_fixed<real_type, 3>(user, "susceptibility", shared->susceptibility, {shared->dim_susceptibility_1, shared->dim_susceptibility_2, shared->dim_susceptibility_3}, NA_REAL, NA_REAL);
  shared->susceptibility_asymp = user_get_array_fixed<real_type, 3>(user, "susceptibility_asymp", shared->susceptibility_asymp, {shared->dim_susceptibility_asymp_1, shared->dim_susceptibility_asymp_2, shared->dim_susceptibility_asymp_3}, NA_REAL, NA_REAL);
  shared->susceptibility_symp = user_get_array_fixed<real_type, 3>(user, "susceptibility_symp", shared->susceptibility_symp, {shared->dim_susceptibility_symp_1, shared->dim_susceptibility_symp_2, shared->dim_susceptibility_symp_3}, NA_REAL, NA_REAL);
  shared->symp_trans = user_get_array_fixed<real_type, 3>(user, "symp_trans", shared->symp_trans, {shared->dim_symp_trans_1, shared->dim_symp_trans_2, shared->dim_symp_trans_3}, NA_REAL, NA_REAL);
  shared->sympt_frac = user_get_array_fixed<real_type, 3>(user, "sympt_frac", shared->sympt_frac, {shared->dim_sympt_frac_1, shared->dim_sympt_frac_2, shared->dim_sympt_frac_3}, NA_REAL, NA_REAL);
  shared->tot_hosp_ini = user_get_array_fixed<real_type, 3>(user, "tot_hosp_ini", shared->tot_hosp_ini, {shared->dim_tot_hosp_ini_1, shared->dim_tot_hosp_ini_2, shared->dim_tot_hosp_ini_3}, NA_REAL, NA_REAL);
  shared->tot_infected_ini = user_get_array_fixed<real_type, 3>(user, "tot_infected_ini", shared->tot_infected_ini, {shared->dim_tot_infected_ini_1, shared->dim_tot_infected_ini_2, shared->dim_tot_infected_ini_3}, NA_REAL, NA_REAL);
  shared->tot_resp_ini = user_get_array_fixed<real_type, 3>(user, "tot_resp_ini", shared->tot_resp_ini, {shared->dim_tot_resp_ini_1, shared->dim_tot_resp_ini_2, shared->dim_tot_resp_ini_3}, NA_REAL, NA_REAL);
  shared->transmisibility = user_get_array_fixed<real_type, 3>(user, "transmisibility", shared->transmisibility, {shared->dim_transmisibility_1, shared->dim_transmisibility_2, shared->dim_transmisibility_3}, NA_REAL, NA_REAL);
  shared->vaccinations = user_get_array_fixed<real_type, 3>(user, "vaccinations", shared->vaccinations, {shared->dim_vaccinations_1, shared->dim_vaccinations_2, shared->dim_vaccinations_3}, NA_REAL, NA_REAL);
  shared->waning_immunity_vax = user_get_array_fixed<real_type, 3>(user, "waning_immunity_vax", shared->waning_immunity_vax, {shared->dim_waning_immunity_vax_1, shared->dim_waning_immunity_vax_2, shared->dim_waning_immunity_vax_3}, NA_REAL, NA_REAL);
  for (int i = 1; i <= shared->dim_A_1; ++i) {
    for (int j = 1; j <= shared->dim_A_2; ++j) {
      for (int k = 1; k <= shared->dim_A_3; ++k) {
        shared->initial_A[i - 1 + shared->dim_A_1 * (j - 1) + shared->dim_A_12 * (k - 1)] = shared->A_ini[shared->dim_A_ini_12 * (k - 1) + shared->dim_A_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_B_D_1; ++i) {
    for (int j = 1; j <= shared->dim_B_D_2; ++j) {
      for (int k = 1; k <= shared->dim_B_D_3; ++k) {
        shared->initial_B_D[i - 1 + shared->dim_B_D_1 * (j - 1) + shared->dim_B_D_12 * (k - 1)] = shared->B_D_ini[shared->dim_B_D_ini_12 * (k - 1) + shared->dim_B_D_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_B_D_H_1; ++i) {
    for (int j = 1; j <= shared->dim_B_D_H_2; ++j) {
      for (int k = 1; k <= shared->dim_B_D_H_3; ++k) {
        shared->initial_B_D_H[i - 1 + shared->dim_B_D_H_1 * (j - 1) + shared->dim_B_D_H_12 * (k - 1)] = shared->B_D_H_ini[shared->dim_B_D_H_ini_12 * (k - 1) + shared->dim_B_D_H_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_B_D_ICU_1; ++i) {
    for (int j = 1; j <= shared->dim_B_D_ICU_2; ++j) {
      for (int k = 1; k <= shared->dim_B_D_ICU_3; ++k) {
        shared->initial_B_D_ICU[i - 1 + shared->dim_B_D_ICU_1 * (j - 1) + shared->dim_B_D_ICU_12 * (k - 1)] = shared->B_D_ICU_ini[shared->dim_B_D_ICU_ini_12 * (k - 1) + shared->dim_B_D_ICU_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_D_1; ++i) {
    for (int j = 1; j <= shared->dim_D_2; ++j) {
      for (int k = 1; k <= shared->dim_D_3; ++k) {
        shared->initial_D[i - 1 + shared->dim_D_1 * (j - 1) + shared->dim_D_12 * (k - 1)] = shared->D_ini[shared->dim_D_ini_12 * (k - 1) + shared->dim_D_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_Ea_1; ++i) {
    for (int j = 1; j <= shared->dim_Ea_2; ++j) {
      for (int k = 1; k <= shared->dim_Ea_3; ++k) {
        shared->initial_Ea[i - 1 + shared->dim_Ea_1 * (j - 1) + shared->dim_Ea_12 * (k - 1)] = shared->Ea_ini[shared->dim_Ea_ini_12 * (k - 1) + shared->dim_Ea_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_Es_1; ++i) {
    for (int j = 1; j <= shared->dim_Es_2; ++j) {
      for (int k = 1; k <= shared->dim_Es_3; ++k) {
        shared->initial_Es[i - 1 + shared->dim_Es_1 * (j - 1) + shared->dim_Es_12 * (k - 1)] = shared->Es_ini[shared->dim_Es_ini_12 * (k - 1) + shared->dim_Es_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_H_1; ++i) {
    for (int j = 1; j <= shared->dim_H_2; ++j) {
      for (int k = 1; k <= shared->dim_H_3; ++k) {
        shared->initial_H[i - 1 + shared->dim_H_1 * (j - 1) + shared->dim_H_12 * (k - 1)] = shared->H_ini[shared->dim_H_ini_12 * (k - 1) + shared->dim_H_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_1; ++i) {
    for (int j = 1; j <= shared->dim_I_2; ++j) {
      for (int k = 1; k <= shared->dim_I_3; ++k) {
        shared->initial_I[i - 1 + shared->dim_I_1 * (j - 1) + shared->dim_I_12 * (k - 1)] = shared->I_ini[shared->dim_I_ini_12 * (k - 1) + shared->dim_I_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_ICU_H_1; ++i) {
    for (int j = 1; j <= shared->dim_ICU_H_2; ++j) {
      for (int k = 1; k <= shared->dim_ICU_H_3; ++k) {
        shared->initial_ICU_H[i - 1 + shared->dim_ICU_H_1 * (j - 1) + shared->dim_ICU_H_12 * (k - 1)] = shared->ICU_H_ini[shared->dim_ICU_H_ini_12 * (k - 1) + shared->dim_ICU_H_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_ICU_P_1; ++i) {
    for (int j = 1; j <= shared->dim_ICU_P_2; ++j) {
      for (int k = 1; k <= shared->dim_ICU_P_3; ++k) {
        shared->initial_ICU_P[i - 1 + shared->dim_ICU_P_1 * (j - 1) + shared->dim_ICU_P_12 * (k - 1)] = shared->ICU_P_ini[shared->dim_ICU_P_ini_12 * (k - 1) + shared->dim_ICU_P_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_ICU_R_1; ++i) {
    for (int j = 1; j <= shared->dim_ICU_R_2; ++j) {
      for (int k = 1; k <= shared->dim_ICU_R_3; ++k) {
        shared->initial_ICU_R[i - 1 + shared->dim_ICU_R_1 * (j - 1) + shared->dim_ICU_R_12 * (k - 1)] = shared->ICU_R_ini[shared->dim_ICU_R_ini_12 * (k - 1) + shared->dim_ICU_R_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_P_1; ++i) {
    for (int j = 1; j <= shared->dim_P_2; ++j) {
      for (int k = 1; k <= shared->dim_P_3; ++k) {
        shared->initial_P[i - 1 + shared->dim_P_1 * (j - 1) + shared->dim_P_12 * (k - 1)] = shared->P_ini[shared->dim_P_ini_12 * (k - 1) + shared->dim_P_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_R_1; ++i) {
    for (int j = 1; j <= shared->dim_R_2; ++j) {
      for (int k = 1; k <= shared->dim_R_3; ++k) {
        shared->initial_R[i - 1 + shared->dim_R_1 * (j - 1) + shared->dim_R_12 * (k - 1)] = shared->R_ini[shared->dim_R_ini_12 * (k - 1) + shared->dim_R_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_S_1; ++i) {
    for (int j = 1; j <= shared->dim_S_2; ++j) {
      shared->initial_S[i - 1 + shared->dim_S_1 * (j - 1)] = shared->S_ini[shared->dim_S_ini_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_tot_hosp_1; ++i) {
    for (int j = 1; j <= shared->dim_tot_hosp_2; ++j) {
      for (int k = 1; k <= shared->dim_tot_hosp_3; ++k) {
        shared->initial_tot_hosp[i - 1 + shared->dim_tot_hosp_1 * (j - 1) + shared->dim_tot_hosp_12 * (k - 1)] = shared->tot_hosp_ini[shared->dim_tot_hosp_ini_12 * (k - 1) + shared->dim_tot_hosp_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_tot_infected_1; ++i) {
    for (int j = 1; j <= shared->dim_tot_infected_2; ++j) {
      for (int k = 1; k <= shared->dim_tot_infected_3; ++k) {
        shared->initial_tot_infected[i - 1 + shared->dim_tot_infected_1 * (j - 1) + shared->dim_tot_infected_12 * (k - 1)] = shared->tot_infected_ini[shared->dim_tot_infected_ini_12 * (k - 1) + shared->dim_tot_infected_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_tot_resp_1; ++i) {
    for (int j = 1; j <= shared->dim_tot_resp_2; ++j) {
      for (int k = 1; k <= shared->dim_tot_resp_3; ++k) {
        shared->initial_tot_resp[i - 1 + shared->dim_tot_resp_1 * (j - 1) + shared->dim_tot_resp_12 * (k - 1)] = shared->tot_resp_ini[shared->dim_tot_resp_ini_12 * (k - 1) + shared->dim_tot_resp_ini_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_HR_1; ++i) {
    for (int j = 1; j <= shared->dim_p_HR_2; ++j) {
      for (int k = 1; k <= shared->dim_p_HR_3; ++k) {
        shared->p_HR[i - 1 + shared->dim_p_HR_1 * (j - 1) + shared->dim_p_HR_12 * (k - 1)] = 1 - std::exp(- shared->dt / (real_type) shared->length_hosp[shared->dim_length_hosp_12 * (k - 1) + shared->dim_length_hosp_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_ICU_P_1; ++i) {
    for (int j = 1; j <= shared->dim_p_ICU_P_2; ++j) {
      for (int k = 1; k <= shared->dim_p_ICU_P_3; ++k) {
        shared->p_ICU_P[i - 1 + shared->dim_p_ICU_P_1 * (j - 1) + shared->dim_p_ICU_P_12 * (k - 1)] = 1 - std::exp(- shared->dt / (real_type) shared->length_icu[shared->dim_length_icu_12 * (k - 1) + shared->dim_length_icu_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_ICU_PR_1; ++i) {
    for (int j = 1; j <= shared->dim_p_ICU_PR_2; ++j) {
      for (int k = 1; k <= shared->dim_p_ICU_PR_3; ++k) {
        shared->p_ICU_PR[i - 1 + shared->dim_p_ICU_PR_1 * (j - 1) + shared->dim_p_ICU_PR_12 * (k - 1)] = 1 - std::exp(- shared->dt / (real_type) shared->post_icu[shared->dim_post_icu_12 * (k - 1) + shared->dim_post_icu_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_ICU_R_1; ++i) {
    for (int j = 1; j <= shared->dim_p_ICU_R_2; ++j) {
      for (int k = 1; k <= shared->dim_p_ICU_R_3; ++k) {
        shared->p_ICU_R[i - 1 + shared->dim_p_ICU_R_1 * (j - 1) + shared->dim_p_ICU_R_12 * (k - 1)] = 1 - std::exp(- shared->dt / (real_type) shared->pre_icu[shared->dim_pre_icu_12 * (k - 1) + shared->dim_pre_icu_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_hosp_1; ++i) {
    for (int j = 1; j <= shared->dim_p_hosp_2; ++j) {
      for (int k = 1; k <= shared->dim_p_hosp_3; ++k) {
        shared->p_hosp[i - 1 + shared->dim_p_hosp_1 * (j - 1) + shared->dim_p_hosp_12 * (k - 1)] = shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1] * (1 - shared->icu_prob[shared->dim_icu_prob_12 * (k - 1) + shared->dim_icu_prob_1 * (j - 1) + i - 1]) / (real_type) (shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1] + (1 - shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1]) * shared->prob_death_non_hosp[shared->dim_prob_death_non_hosp_12 * (k - 1) + shared->dim_prob_death_non_hosp_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_hosp_d_1; ++i) {
    for (int j = 1; j <= shared->dim_p_hosp_d_2; ++j) {
      for (int k = 1; k <= shared->dim_p_hosp_d_3; ++k) {
        shared->p_hosp_d[i - 1 + shared->dim_p_hosp_d_1 * (j - 1) + shared->dim_p_hosp_d_12 * (k - 1)] = shared->prob_death_hosp[shared->dim_prob_death_hosp_12 * (k - 1) + shared->dim_prob_death_hosp_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_hosp_icu_R_1; ++i) {
    for (int j = 1; j <= shared->dim_p_hosp_icu_R_2; ++j) {
      for (int k = 1; k <= shared->dim_p_hosp_icu_R_3; ++k) {
        shared->p_hosp_icu_R[i - 1 + shared->dim_p_hosp_icu_R_1 * (j - 1) + shared->dim_p_hosp_icu_R_12 * (k - 1)] = 1 - shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1] - (1 - shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1]) * shared->prob_death_non_hosp[shared->dim_prob_death_non_hosp_12 * (k - 1) + shared->dim_prob_death_non_hosp_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_icu_1; ++i) {
    for (int j = 1; j <= shared->dim_p_icu_2; ++j) {
      for (int k = 1; k <= shared->dim_p_icu_3; ++k) {
        shared->p_icu[i - 1 + shared->dim_p_icu_1 * (j - 1) + shared->dim_p_icu_12 * (k - 1)] = shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1] * shared->icu_prob[shared->dim_icu_prob_12 * (k - 1) + shared->dim_icu_prob_1 * (j - 1) + i - 1] / (real_type) (shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1] * shared->icu_prob[shared->dim_icu_prob_12 * (k - 1) + shared->dim_icu_prob_1 * (j - 1) + i - 1] + (1 - shared->hosp_prob[shared->dim_hosp_prob_12 * (k - 1) + shared->dim_hosp_prob_1 * (j - 1) + i - 1]) * shared->prob_death_non_hosp[shared->dim_prob_death_non_hosp_12 * (k - 1) + shared->dim_prob_death_non_hosp_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_icu_d_1; ++i) {
    for (int j = 1; j <= shared->dim_p_icu_d_2; ++j) {
      for (int k = 1; k <= shared->dim_p_icu_d_3; ++k) {
        shared->p_icu_d[i - 1 + shared->dim_p_icu_d_1 * (j - 1) + shared->dim_p_icu_d_12 * (k - 1)] = shared->prob_death_icu[shared->dim_prob_death_icu_12 * (k - 1) + shared->dim_prob_death_icu_1 * (j - 1) + i - 1];
      }
    }
  }
  for (int i = 1; i <= shared->dim_p_waning_1; ++i) {
    for (int j = 1; j <= shared->dim_p_waning_2; ++j) {
      shared->p_waning[i - 1 + shared->dim_p_waning_1 * (j - 1)] = 1 - std::exp(- shared->dt / (real_type) shared->T_waning[shared->dim_T_waning_1 * (j - 1) + i - 1]);
    }
  }
  for (int i = 1; i <= shared->dim_pa_1; ++i) {
    for (int j = 1; j <= shared->dim_pa_2; ++j) {
      for (int k = 1; k <= shared->dim_pa_3; ++k) {
        shared->pa[i - 1 + shared->dim_pa_1 * (j - 1) + shared->dim_pa_12 * (k - 1)] = shared->asympt_frac[shared->dim_asympt_frac_12 * (k - 1) + shared->dim_asympt_frac_1 * (j - 1) + i - 1] * shared->susceptibility_asymp[shared->dim_susceptibility_asymp_12 * (k - 1) + shared->dim_susceptibility_asymp_1 * (j - 1) + i - 1] / (real_type) (shared->asympt_frac[shared->dim_asympt_frac_12 * (k - 1) + shared->dim_asympt_frac_1 * (j - 1) + i - 1] * shared->susceptibility_asymp[shared->dim_susceptibility_asymp_12 * (k - 1) + shared->dim_susceptibility_asymp_1 * (j - 1) + i - 1] + shared->sympt_frac[shared->dim_sympt_frac_12 * (k - 1) + shared->dim_sympt_frac_1 * (j - 1) + i - 1] * shared->susceptibility_symp[shared->dim_susceptibility_symp_12 * (k - 1) + shared->dim_susceptibility_symp_1 * (j - 1) + i - 1]);
      }
    }
  }
  for (int i = 1; i <= shared->dim_symp_asymp_effect_1; ++i) {
    for (int j = 1; j <= shared->dim_symp_asymp_effect_2; ++j) {
      for (int k = 1; k <= shared->dim_symp_asymp_effect_3; ++k) {
        shared->symp_asymp_effect[i - 1 + shared->dim_symp_asymp_effect_1 * (j - 1) + shared->dim_symp_asymp_effect_12 * (k - 1)] = (shared->asympt_frac[shared->dim_asympt_frac_12 * (k - 1) + shared->dim_asympt_frac_1 * (j - 1) + i - 1] * shared->susceptibility_asymp[shared->dim_susceptibility_asymp_12 * (k - 1) + shared->dim_susceptibility_asymp_1 * (j - 1) + i - 1] + shared->sympt_frac[shared->dim_sympt_frac_12 * (k - 1) + shared->dim_sympt_frac_1 * (j - 1) + i - 1] * shared->susceptibility_symp[shared->dim_susceptibility_symp_12 * (k - 1) + shared->dim_susceptibility_symp_1 * (j - 1) + i - 1]);
      }
    }
  }
  return dust::pars_type<model>(shared, internal);
}
template <>
cpp11::sexp dust_info<model>(const dust::pars_type<model>& pars) {
  const model::internal_type internal = pars.internal;
  const std::shared_ptr<const model::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "beta_dyn_change", "trigger", "incidence_int", "peak_trigger", "e_int", "log_beta", "beta_thresh", "tot_N", "hosp_inc", "S", "Ea", "Es", "P", "I", "A", "H", "ICU_H", "ICU_R", "ICU_P", "B_D", "B_D_H", "B_D_ICU", "R", "D", "tot_infected", "tot_hosp", "tot_resp"});
  cpp11::writable::list dim(28);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({1});
  dim[9] = cpp11::writable::integers({shared->dim_hosp_inc});
  dim[10] = cpp11::writable::integers({shared->dim_S_1, shared->dim_S_2});
  dim[11] = cpp11::writable::integers({shared->dim_Ea_1, shared->dim_Ea_2, shared->dim_Ea_3});
  dim[12] = cpp11::writable::integers({shared->dim_Es_1, shared->dim_Es_2, shared->dim_Es_3});
  dim[13] = cpp11::writable::integers({shared->dim_P_1, shared->dim_P_2, shared->dim_P_3});
  dim[14] = cpp11::writable::integers({shared->dim_I_1, shared->dim_I_2, shared->dim_I_3});
  dim[15] = cpp11::writable::integers({shared->dim_A_1, shared->dim_A_2, shared->dim_A_3});
  dim[16] = cpp11::writable::integers({shared->dim_H_1, shared->dim_H_2, shared->dim_H_3});
  dim[17] = cpp11::writable::integers({shared->dim_ICU_H_1, shared->dim_ICU_H_2, shared->dim_ICU_H_3});
  dim[18] = cpp11::writable::integers({shared->dim_ICU_R_1, shared->dim_ICU_R_2, shared->dim_ICU_R_3});
  dim[19] = cpp11::writable::integers({shared->dim_ICU_P_1, shared->dim_ICU_P_2, shared->dim_ICU_P_3});
  dim[20] = cpp11::writable::integers({shared->dim_B_D_1, shared->dim_B_D_2, shared->dim_B_D_3});
  dim[21] = cpp11::writable::integers({shared->dim_B_D_H_1, shared->dim_B_D_H_2, shared->dim_B_D_H_3});
  dim[22] = cpp11::writable::integers({shared->dim_B_D_ICU_1, shared->dim_B_D_ICU_2, shared->dim_B_D_ICU_3});
  dim[23] = cpp11::writable::integers({shared->dim_R_1, shared->dim_R_2, shared->dim_R_3});
  dim[24] = cpp11::writable::integers({shared->dim_D_1, shared->dim_D_2, shared->dim_D_3});
  dim[25] = cpp11::writable::integers({shared->dim_tot_infected_1, shared->dim_tot_infected_2, shared->dim_tot_infected_3});
  dim[26] = cpp11::writable::integers({shared->dim_tot_hosp_1, shared->dim_tot_hosp_2, shared->dim_tot_hosp_3});
  dim[27] = cpp11::writable::integers({shared->dim_tot_resp_1, shared->dim_tot_resp_2, shared->dim_tot_resp_3});
  dim.names() = nms;
  cpp11::writable::list index(28);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = cpp11::writable::integers({9});
  index[9] = integer_sequence(10, shared->dim_hosp_inc);
  index[10] = integer_sequence(shared->offset_variable_S + 1, shared->dim_S);
  index[11] = integer_sequence(shared->offset_variable_Ea + 1, shared->dim_Ea);
  index[12] = integer_sequence(shared->offset_variable_Es + 1, shared->dim_Es);
  index[13] = integer_sequence(shared->offset_variable_P + 1, shared->dim_P);
  index[14] = integer_sequence(shared->offset_variable_I + 1, shared->dim_I);
  index[15] = integer_sequence(shared->offset_variable_A + 1, shared->dim_A);
  index[16] = integer_sequence(shared->offset_variable_H + 1, shared->dim_H);
  index[17] = integer_sequence(shared->offset_variable_ICU_H + 1, shared->dim_ICU_H);
  index[18] = integer_sequence(shared->offset_variable_ICU_R + 1, shared->dim_ICU_R);
  index[19] = integer_sequence(shared->offset_variable_ICU_P + 1, shared->dim_ICU_P);
  index[20] = integer_sequence(shared->offset_variable_B_D + 1, shared->dim_B_D);
  index[21] = integer_sequence(shared->offset_variable_B_D_H + 1, shared->dim_B_D_H);
  index[22] = integer_sequence(shared->offset_variable_B_D_ICU + 1, shared->dim_B_D_ICU);
  index[23] = integer_sequence(shared->offset_variable_R + 1, shared->dim_R);
  index[24] = integer_sequence(shared->offset_variable_D + 1, shared->dim_D);
  index[25] = integer_sequence(shared->offset_variable_tot_infected + 1, shared->dim_tot_infected);
  index[26] = integer_sequence(shared->offset_variable_tot_hosp + 1, shared->dim_tot_hosp);
  index[27] = integer_sequence(shared->offset_variable_tot_resp + 1, shared->dim_tot_resp);
  index.names() = nms;
  size_t len = shared->offset_variable_tot_resp + shared->dim_tot_resp;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_model_capabilities() {
  return dust::r::dust_capabilities<model>();
}

cpp11::sexp dust_model_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<model>;

SEXP dust_cpu_model_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                             cpp11::sexp r_n_particles, size_t n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config) {
  return dust::r::dust_cpu_alloc<model>(r_pars, pars_multi, step, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config);
}

SEXP dust_cpu_model_run(SEXP ptr, size_t step_end) {
  return dust::r::dust_run<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_model_simulate(SEXP ptr, cpp11::sexp step_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_model_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_model_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_step,
                                               r_set_initial_state);
}

SEXP dust_cpu_model_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

size_t dust_cpu_model_step(SEXP ptr) {
  return dust::r::dust_step<model_cpu>(ptr);
}

void dust_cpu_model_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_model_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_model_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_model_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_model_set_data(SEXP ptr, cpp11::list data) {
  dust::r::dust_set_data<model_cpu>(ptr, data);
  return R_NilValue;
}

SEXP dust_cpu_model_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_model_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot) {
  return dust::r::dust_filter<model_cpu>(ptr, save_trajectories, step_snapshot);
}

void dust_cpu_model_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_model_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}
